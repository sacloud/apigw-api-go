// Code generated by ogen, DO NOT EDIT.

package v1

import (
	"context"
	"net/url"
	"strings"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/uri"
)

func trimTrailingSlashes(u *url.URL) {
	u.Path = strings.TrimRight(u.Path, "/")
	u.RawPath = strings.TrimRight(u.RawPath, "/")
}

// Invoker invokes operations described by OpenAPI v3 specification.
type Invoker interface {
	// AddCertificate invokes addCertificate operation.
	//
	// SSL証明書を登録します。.
	//
	// POST /certificates
	AddCertificate(ctx context.Context, request *Certificate) (AddCertificateRes, error)
	// AddDomain invokes addDomain operation.
	//
	// Route の host で使用するドメインを登録します。.
	//
	// POST /domains
	AddDomain(ctx context.Context, request *Domain) (AddDomainRes, error)
	// AddGroup invokes addGroup operation.
	//
	// 新しい Group を登録します。<br> Group は User
	// を分類し、アクセス制御を管理するために使用されます。.
	//
	// POST /groups
	AddGroup(ctx context.Context, request *Group) (AddGroupRes, error)
	// AddOidc invokes addOidc operation.
	//
	// OIDC認証の設定値を登録します。.
	//
	// POST /oidc
	AddOidc(ctx context.Context, request *Oidc) (AddOidcRes, error)
	// AddRoute invokes addRoute operation.
	//
	// 登録した Service に対して、公開するエンドポイントとして Route
	// を登録します。<br> 各 Route の認証設定は全て Service の設定に準じます。.
	//
	// POST /services/{serviceId}/routes
	AddRoute(ctx context.Context, request *RouteDetail, params AddRouteParams) (AddRouteRes, error)
	// AddService invokes addService operation.
	//
	// アップストリームのエンドポイント情報である Service を登録します。.
	//
	// POST /services
	AddService(ctx context.Context, request *ServiceDetail) (AddServiceRes, error)
	// AddUser invokes addUser operation.
	//
	// 認証情報を設定する User を登録します。<br> User のIP制限設定は、Route
	// にIP制限が設定されていない場合に機能します。.
	//
	// POST /users
	AddUser(ctx context.Context, request *UserDetail) (AddUserRes, error)
	// DeleteCertificate invokes deleteCertificate operation.
	//
	// 登録した Certificate を削除します。.
	//
	// DELETE /certificates/{certificateId}
	DeleteCertificate(ctx context.Context, params DeleteCertificateParams) (DeleteCertificateRes, error)
	// DeleteDomain invokes deleteDomain operation.
	//
	// 登録した Domain を削除します。.
	//
	// DELETE /domains/{domainId}
	DeleteDomain(ctx context.Context, params DeleteDomainParams) (DeleteDomainRes, error)
	// DeleteGroup invokes deleteGroup operation.
	//
	// 登録した Group を削除します。.
	//
	// DELETE /groups/{groupId}
	DeleteGroup(ctx context.Context, params DeleteGroupParams) (DeleteGroupRes, error)
	// DeleteOidc invokes deleteOidc operation.
	//
	// 登録した OIDC認証 を削除します。.
	//
	// DELETE /oidc/{oidcId}
	DeleteOidc(ctx context.Context, params DeleteOidcParams) (DeleteOidcRes, error)
	// DeleteRoute invokes deleteRoute operation.
	//
	// Service に登録した Route を削除します。.
	//
	// DELETE /services/{serviceId}/routes/{routeId}
	DeleteRoute(ctx context.Context, params DeleteRouteParams) (DeleteRouteRes, error)
	// DeleteService invokes deleteService operation.
	//
	// 登録した Service を削除します。.
	//
	// DELETE /services/{serviceId}
	DeleteService(ctx context.Context, params DeleteServiceParams) (DeleteServiceRes, error)
	// DeleteUser invokes deleteUser operation.
	//
	// 登録した User を削除します。.
	//
	// DELETE /users/{userId}
	DeleteUser(ctx context.Context, params DeleteUserParams) (DeleteUserRes, error)
	// GetCertificates invokes getCertificates operation.
	//
	// 登録した Certificate の一覧を取得します。.
	//
	// GET /certificates
	GetCertificates(ctx context.Context) (GetCertificatesRes, error)
	// GetDomains invokes getDomains operation.
	//
	// 登録した Domain の一覧を取得します。.
	//
	// GET /domains
	GetDomains(ctx context.Context) (GetDomainsRes, error)
	// GetGroup invokes getGroup operation.
	//
	// 登録した Group の詳細情報を取得します。.
	//
	// GET /groups/{groupId}
	GetGroup(ctx context.Context, params GetGroupParams) (GetGroupRes, error)
	// GetGroups invokes getGroups operation.
	//
	// 登録した Group の一覧を取得します。.
	//
	// GET /groups
	GetGroups(ctx context.Context) (GetGroupsRes, error)
	// GetOidc invokes getOidc operation.
	//
	// 登録した OIDC認証 の一覧を取得します。.
	//
	// GET /oidc
	GetOidc(ctx context.Context) (GetOidcRes, error)
	// GetOidcById invokes getOidcById operation.
	//
	// 登録した OIDC認証 の詳細を取得します。.
	//
	// GET /oidc/{oidcId}
	GetOidcById(ctx context.Context, params GetOidcByIdParams) (GetOidcByIdRes, error)
	// GetPlans invokes getPlans operation.
	//
	// 現在契約可能な API Gateway の料金プランの一覧を取得します。.
	//
	// GET /plans
	GetPlans(ctx context.Context) (GetPlansRes, error)
	// GetRequestTransformation invokes getRequestTransformation operation.
	//
	// Route に登録したリクエスト変換情報を取得します。.
	//
	// GET /services/{serviceId}/routes/{routeId}/request
	GetRequestTransformation(ctx context.Context, params GetRequestTransformationParams) (GetRequestTransformationRes, error)
	// GetResponseTransformation invokes getResponseTransformation operation.
	//
	// Route に登録したレスポンス変換情報を取得します。.
	//
	// GET /services/{serviceId}/routes/{routeId}/response
	GetResponseTransformation(ctx context.Context, params GetResponseTransformationParams) (GetResponseTransformationRes, error)
	// GetRoute invokes getRoute operation.
	//
	// Service に登録した Route の詳細情報を取得します。.
	//
	// GET /services/{serviceId}/routes/{routeId}
	GetRoute(ctx context.Context, params GetRouteParams) (GetRouteRes, error)
	// GetRouteAuthorization invokes getRouteAuthorization operation.
	//
	// Route に登録した認可情報を取得します。.
	//
	// GET /services/{serviceId}/routes/{routeId}/authorization
	GetRouteAuthorization(ctx context.Context, params GetRouteAuthorizationParams) (GetRouteAuthorizationRes, error)
	// GetServiceById invokes getServiceById operation.
	//
	// 登録した Service の詳細情報を取得します。.
	//
	// GET /services/{serviceId}
	GetServiceById(ctx context.Context, params GetServiceByIdParams) (GetServiceByIdRes, error)
	// GetServiceRoutes invokes getServiceRoutes operation.
	//
	// Service に登録した Route の一覧を取得します。.
	//
	// GET /services/{serviceId}/routes
	GetServiceRoutes(ctx context.Context, params GetServiceRoutesParams) (GetServiceRoutesRes, error)
	// GetServices invokes getServices operation.
	//
	// 登録した Service の一覧を取得します。.
	//
	// GET /services
	GetServices(ctx context.Context) (GetServicesRes, error)
	// GetSubscription invokes getSubscription operation.
	//
	// お客様の API Gateway 契約状態を取得します。<br>
	// 契約情報が存在しない場合は、未契約のステータスを返却します。<br>
	// 契約情報が存在する場合は、契約中のステータスと加入中のプラン情報を返却します。.
	//
	// GET /subscriptions
	GetSubscription(ctx context.Context) (GetSubscriptionRes, error)
	// GetUser invokes getUser operation.
	//
	// 登録した User の詳細情報を取得します。.
	//
	// GET /users/{userId}
	GetUser(ctx context.Context, params GetUserParams) (GetUserRes, error)
	// GetUserAuthentication invokes getUserAuthentication operation.
	//
	// User に登録された認証情報を取得します。<br>
	// なお、パスワード、シークレットなどの機密情報は取得できません。.
	//
	// GET /users/{userId}/authentication
	GetUserAuthentication(ctx context.Context, params GetUserAuthenticationParams) (GetUserAuthenticationRes, error)
	// GetUserGroup invokes getUserGroup operation.
	//
	// 登録した User が所属している Group の一覧を取得します。.
	//
	// GET /users/{userId}/groups
	GetUserGroup(ctx context.Context, params GetUserGroupParams) (GetUserGroupRes, error)
	// GetUsers invokes getUsers operation.
	//
	// 登録した User の一覧を取得します。.
	//
	// GET /users
	GetUsers(ctx context.Context) (GetUsersRes, error)
	// Subscribe invokes subscribe operation.
	//
	// 選択したプランで API Gateway の利用契約を行います。.
	//
	// POST /subscriptions
	Subscribe(ctx context.Context, request *SubscriptionOption) (SubscribeRes, error)
	// Unsubscribe invokes unsubscribe operation.
	//
	// API Gateway の契約を解約します。.
	//
	// DELETE /subscriptions
	Unsubscribe(ctx context.Context) (UnsubscribeRes, error)
	// UpdateCertificate invokes updateCertificate operation.
	//
	// 登録した Certificate の詳細情報を更新します。.
	//
	// PUT /certificates/{certificateId}
	UpdateCertificate(ctx context.Context, request *Certificate, params UpdateCertificateParams) (UpdateCertificateRes, error)
	// UpdateDomain invokes updateDomain operation.
	//
	// 登録した Domain
	// の証明書情報を更新します。<br>ドメイン名の変更はできません。.
	//
	// PUT /domains/{domainId}
	UpdateDomain(ctx context.Context, request *DomainPUT, params UpdateDomainParams) (UpdateDomainRes, error)
	// UpdateGroup invokes updateGroup operation.
	//
	// 登録した Group の詳細情報を更新します。.
	//
	// PUT /groups/{groupId}
	UpdateGroup(ctx context.Context, request *Group, params UpdateGroupParams) (UpdateGroupRes, error)
	// UpdateOidc invokes updateOidc operation.
	//
	// 登録した OIDC認証 を更新します。.
	//
	// PUT /oidc/{oidcId}
	UpdateOidc(ctx context.Context, request *Oidc, params UpdateOidcParams) (UpdateOidcRes, error)
	// UpdateRoute invokes updateRoute operation.
	//
	// Service に登録した Route の詳細情報を更新します。.
	//
	// PUT /services/{serviceId}/routes/{routeId}
	UpdateRoute(ctx context.Context, request *RouteDetail, params UpdateRouteParams) (UpdateRouteRes, error)
	// UpdateService invokes updateService operation.
	//
	// 登録した Service の詳細情報を更新します。.
	//
	// PUT /services/{serviceId}
	UpdateService(ctx context.Context, request *ServiceDetail, params UpdateServiceParams) (UpdateServiceRes, error)
	// UpdateSubscription invokes updateSubscription operation.
	//
	// 選択したプランで API Gateway の契約内容を更新します。.
	//
	// PUT /subscriptions
	UpdateSubscription(ctx context.Context, request *SubscriptionOption) (UpdateSubscriptionRes, error)
	// UpdateUser invokes updateUser operation.
	//
	// 登録した User の詳細情報を更新します。.
	//
	// PUT /users/{userId}
	UpdateUser(ctx context.Context, request *UserDetail, params UpdateUserParams) (UpdateUserRes, error)
	// UpdateUserGroup invokes updateUserGroup operation.
	//
	// 登録した User を Group に所属させます。.
	//
	// PUT /users/{userId}/groups
	UpdateUserGroup(ctx context.Context, request jx.Raw, params UpdateUserGroupParams) (UpdateUserGroupRes, error)
	// UpsertRequestTransformation invokes upsertRequestTransformation operation.
	//
	// Route から Service
	// へ転送する際にリクエスト内容を変換する設定を登録します。
	// - **httpMethod**: 設定したHTTPメソッドへ変換します。
	// - **allow**: 設定した Key 以外をリクエストから取り除きます。
	// - **remove**: 設定した Key をリクエストから取り除きます。
	// - **rename**: 設定した From-To に従い、リクエストの Key を変更します。
	// - **replace**: 設定した Key と同名の Key がリクエストに存在する場合、Value
	// の値を置換します。
	// - **add**: 設定した値をリクエストに追加します。同名の Key
	// がリクエストに存在しない場合に機能します。
	// - **append**: 設定した値をリクエストに追加します。同名の Key
	// がリクエストに存在する場合は Value に追記します。.
	//
	// PUT /services/{serviceId}/routes/{routeId}/request
	UpsertRequestTransformation(ctx context.Context, request OptRequestTransformation, params UpsertRequestTransformationParams) (UpsertRequestTransformationRes, error)
	// UpsertResponseTransformation invokes upsertResponseTransformation operation.
	//
	// Route から Service
	// へ転送する際にレスポンス内容を変換する設定を登録します。
	// - **allow**: 設定した Key 以外をレスポンスから取り除きます。
	// - **remove**: 設定した Key をレスポンスから取り除きます。
	// - **rename**: 設定した From-To に従い、レスポンスの Key を変更します。
	// - **replace**: 設定した Key と同名の Key がレスポンスに存在する場合、Value
	// の値を置換します。
	// - **add**: 設定した値をレスポンスに追加します。同名の Key
	// がレスポンスに存在しない場合に機能します。
	// - **append**: 設定した値をレスポンスに追加します。同名の Key
	// がレスポンスに存在する場合は Value に追記します。
	// - **ifStatusCode**:
	// 設定した場合、アップストリームからのレスポンスコードが設定した値と一致する場合に、各種変換が機能します。.
	//
	// PUT /services/{serviceId}/routes/{routeId}/response
	UpsertResponseTransformation(ctx context.Context, request OptResponseTransformation, params UpsertResponseTransformationParams) (UpsertResponseTransformationRes, error)
	// UpsertRouteAuthorization invokes upsertRouteAuthorization operation.
	//
	// 登録した Route に対してアクセス可能な Group を登録します。<br>
	// 登録しない場合は全てのUserがアクセス可能になります。.
	//
	// PUT /services/{serviceId}/routes/{routeId}/authorization
	UpsertRouteAuthorization(ctx context.Context, request OptRouteAuthorizationDetail, params UpsertRouteAuthorizationParams) (UpsertRouteAuthorizationRes, error)
	// UpsertUserAuthentication invokes upsertUserAuthentication operation.
	//
	// User に認証情報を登録します。.
	//
	// PUT /users/{userId}/authentication
	UpsertUserAuthentication(ctx context.Context, request OptUserAuthentication, params UpsertUserAuthenticationParams) (UpsertUserAuthenticationRes, error)
}

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	baseClient
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, opts ...ClientOption) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	trimTrailingSlashes(u)

	c, err := newClientConfig(opts...).baseClient()
	if err != nil {
		return nil, err
	}
	return &Client{
		serverURL:  u,
		baseClient: c,
	}, nil
}

type serverURLKey struct{}

// WithServerURL sets context key to override server URL.
func WithServerURL(ctx context.Context, u *url.URL) context.Context {
	return context.WithValue(ctx, serverURLKey{}, u)
}

func (c *Client) requestURL(ctx context.Context) *url.URL {
	u, ok := ctx.Value(serverURLKey{}).(*url.URL)
	if !ok {
		return c.serverURL
	}
	return u
}

// AddCertificate invokes addCertificate operation.
//
// SSL証明書を登録します。.
//
// POST /certificates
func (c *Client) AddCertificate(ctx context.Context, request *Certificate) (AddCertificateRes, error) {
	res, err := c.sendAddCertificate(ctx, request)
	return res, err
}

func (c *Client) sendAddCertificate(ctx context.Context, request *Certificate) (res AddCertificateRes, err error) {
	// Validate request before sending.
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/certificates"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeAddCertificateRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAddCertificateResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// AddDomain invokes addDomain operation.
//
// Route の host で使用するドメインを登録します。.
//
// POST /domains
func (c *Client) AddDomain(ctx context.Context, request *Domain) (AddDomainRes, error) {
	res, err := c.sendAddDomain(ctx, request)
	return res, err
}

func (c *Client) sendAddDomain(ctx context.Context, request *Domain) (res AddDomainRes, err error) {
	// Validate request before sending.
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/domains"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeAddDomainRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAddDomainResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// AddGroup invokes addGroup operation.
//
// 新しい Group を登録します。<br> Group は User
// を分類し、アクセス制御を管理するために使用されます。.
//
// POST /groups
func (c *Client) AddGroup(ctx context.Context, request *Group) (AddGroupRes, error) {
	res, err := c.sendAddGroup(ctx, request)
	return res, err
}

func (c *Client) sendAddGroup(ctx context.Context, request *Group) (res AddGroupRes, err error) {
	// Validate request before sending.
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/groups"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeAddGroupRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAddGroupResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// AddOidc invokes addOidc operation.
//
// OIDC認証の設定値を登録します。.
//
// POST /oidc
func (c *Client) AddOidc(ctx context.Context, request *Oidc) (AddOidcRes, error) {
	res, err := c.sendAddOidc(ctx, request)
	return res, err
}

func (c *Client) sendAddOidc(ctx context.Context, request *Oidc) (res AddOidcRes, err error) {
	// Validate request before sending.
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/oidc"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeAddOidcRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAddOidcResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// AddRoute invokes addRoute operation.
//
// 登録した Service に対して、公開するエンドポイントとして Route
// を登録します。<br> 各 Route の認証設定は全て Service の設定に準じます。.
//
// POST /services/{serviceId}/routes
func (c *Client) AddRoute(ctx context.Context, request *RouteDetail, params AddRouteParams) (AddRouteRes, error) {
	res, err := c.sendAddRoute(ctx, request, params)
	return res, err
}

func (c *Client) sendAddRoute(ctx context.Context, request *RouteDetail, params AddRouteParams) (res AddRouteRes, err error) {
	// Validate request before sending.
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/services/"
	{
		// Encode "serviceId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "serviceId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.ServiceId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/routes"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeAddRouteRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAddRouteResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// AddService invokes addService operation.
//
// アップストリームのエンドポイント情報である Service を登録します。.
//
// POST /services
func (c *Client) AddService(ctx context.Context, request *ServiceDetail) (AddServiceRes, error) {
	res, err := c.sendAddService(ctx, request)
	return res, err
}

func (c *Client) sendAddService(ctx context.Context, request *ServiceDetail) (res AddServiceRes, err error) {
	// Validate request before sending.
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/services"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeAddServiceRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAddServiceResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// AddUser invokes addUser operation.
//
// 認証情報を設定する User を登録します。<br> User のIP制限設定は、Route
// にIP制限が設定されていない場合に機能します。.
//
// POST /users
func (c *Client) AddUser(ctx context.Context, request *UserDetail) (AddUserRes, error) {
	res, err := c.sendAddUser(ctx, request)
	return res, err
}

func (c *Client) sendAddUser(ctx context.Context, request *UserDetail) (res AddUserRes, err error) {
	// Validate request before sending.
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/users"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeAddUserRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAddUserResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteCertificate invokes deleteCertificate operation.
//
// 登録した Certificate を削除します。.
//
// DELETE /certificates/{certificateId}
func (c *Client) DeleteCertificate(ctx context.Context, params DeleteCertificateParams) (DeleteCertificateRes, error) {
	res, err := c.sendDeleteCertificate(ctx, params)
	return res, err
}

func (c *Client) sendDeleteCertificate(ctx context.Context, params DeleteCertificateParams) (res DeleteCertificateRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/certificates/"
	{
		// Encode "certificateId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "certificateId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.CertificateId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteCertificateResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteDomain invokes deleteDomain operation.
//
// 登録した Domain を削除します。.
//
// DELETE /domains/{domainId}
func (c *Client) DeleteDomain(ctx context.Context, params DeleteDomainParams) (DeleteDomainRes, error) {
	res, err := c.sendDeleteDomain(ctx, params)
	return res, err
}

func (c *Client) sendDeleteDomain(ctx context.Context, params DeleteDomainParams) (res DeleteDomainRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/domains/"
	{
		// Encode "domainId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "domainId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.DomainId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteDomainResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteGroup invokes deleteGroup operation.
//
// 登録した Group を削除します。.
//
// DELETE /groups/{groupId}
func (c *Client) DeleteGroup(ctx context.Context, params DeleteGroupParams) (DeleteGroupRes, error) {
	res, err := c.sendDeleteGroup(ctx, params)
	return res, err
}

func (c *Client) sendDeleteGroup(ctx context.Context, params DeleteGroupParams) (res DeleteGroupRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/groups/"
	{
		// Encode "groupId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "groupId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.GroupId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteGroupResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteOidc invokes deleteOidc operation.
//
// 登録した OIDC認証 を削除します。.
//
// DELETE /oidc/{oidcId}
func (c *Client) DeleteOidc(ctx context.Context, params DeleteOidcParams) (DeleteOidcRes, error) {
	res, err := c.sendDeleteOidc(ctx, params)
	return res, err
}

func (c *Client) sendDeleteOidc(ctx context.Context, params DeleteOidcParams) (res DeleteOidcRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/oidc/"
	{
		// Encode "oidcId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "oidcId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.OidcId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteOidcResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteRoute invokes deleteRoute operation.
//
// Service に登録した Route を削除します。.
//
// DELETE /services/{serviceId}/routes/{routeId}
func (c *Client) DeleteRoute(ctx context.Context, params DeleteRouteParams) (DeleteRouteRes, error) {
	res, err := c.sendDeleteRoute(ctx, params)
	return res, err
}

func (c *Client) sendDeleteRoute(ctx context.Context, params DeleteRouteParams) (res DeleteRouteRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/services/"
	{
		// Encode "serviceId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "serviceId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.ServiceId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/routes/"
	{
		// Encode "routeId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "routeId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.RouteId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteRouteResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteService invokes deleteService operation.
//
// 登録した Service を削除します。.
//
// DELETE /services/{serviceId}
func (c *Client) DeleteService(ctx context.Context, params DeleteServiceParams) (DeleteServiceRes, error) {
	res, err := c.sendDeleteService(ctx, params)
	return res, err
}

func (c *Client) sendDeleteService(ctx context.Context, params DeleteServiceParams) (res DeleteServiceRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/services/"
	{
		// Encode "serviceId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "serviceId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.ServiceId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteServiceResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteUser invokes deleteUser operation.
//
// 登録した User を削除します。.
//
// DELETE /users/{userId}
func (c *Client) DeleteUser(ctx context.Context, params DeleteUserParams) (DeleteUserRes, error) {
	res, err := c.sendDeleteUser(ctx, params)
	return res, err
}

func (c *Client) sendDeleteUser(ctx context.Context, params DeleteUserParams) (res DeleteUserRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/users/"
	{
		// Encode "userId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "userId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.UserId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteUserResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetCertificates invokes getCertificates operation.
//
// 登録した Certificate の一覧を取得します。.
//
// GET /certificates
func (c *Client) GetCertificates(ctx context.Context) (GetCertificatesRes, error) {
	res, err := c.sendGetCertificates(ctx)
	return res, err
}

func (c *Client) sendGetCertificates(ctx context.Context) (res GetCertificatesRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/certificates"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetCertificatesResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetDomains invokes getDomains operation.
//
// 登録した Domain の一覧を取得します。.
//
// GET /domains
func (c *Client) GetDomains(ctx context.Context) (GetDomainsRes, error) {
	res, err := c.sendGetDomains(ctx)
	return res, err
}

func (c *Client) sendGetDomains(ctx context.Context) (res GetDomainsRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/domains"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetDomainsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetGroup invokes getGroup operation.
//
// 登録した Group の詳細情報を取得します。.
//
// GET /groups/{groupId}
func (c *Client) GetGroup(ctx context.Context, params GetGroupParams) (GetGroupRes, error) {
	res, err := c.sendGetGroup(ctx, params)
	return res, err
}

func (c *Client) sendGetGroup(ctx context.Context, params GetGroupParams) (res GetGroupRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/groups/"
	{
		// Encode "groupId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "groupId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.GroupId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetGroupResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetGroups invokes getGroups operation.
//
// 登録した Group の一覧を取得します。.
//
// GET /groups
func (c *Client) GetGroups(ctx context.Context) (GetGroupsRes, error) {
	res, err := c.sendGetGroups(ctx)
	return res, err
}

func (c *Client) sendGetGroups(ctx context.Context) (res GetGroupsRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/groups"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetGroupsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetOidc invokes getOidc operation.
//
// 登録した OIDC認証 の一覧を取得します。.
//
// GET /oidc
func (c *Client) GetOidc(ctx context.Context) (GetOidcRes, error) {
	res, err := c.sendGetOidc(ctx)
	return res, err
}

func (c *Client) sendGetOidc(ctx context.Context) (res GetOidcRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/oidc"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetOidcResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetOidcById invokes getOidcById operation.
//
// 登録した OIDC認証 の詳細を取得します。.
//
// GET /oidc/{oidcId}
func (c *Client) GetOidcById(ctx context.Context, params GetOidcByIdParams) (GetOidcByIdRes, error) {
	res, err := c.sendGetOidcById(ctx, params)
	return res, err
}

func (c *Client) sendGetOidcById(ctx context.Context, params GetOidcByIdParams) (res GetOidcByIdRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/oidc/"
	{
		// Encode "oidcId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "oidcId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.OidcId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetOidcByIdResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetPlans invokes getPlans operation.
//
// 現在契約可能な API Gateway の料金プランの一覧を取得します。.
//
// GET /plans
func (c *Client) GetPlans(ctx context.Context) (GetPlansRes, error) {
	res, err := c.sendGetPlans(ctx)
	return res, err
}

func (c *Client) sendGetPlans(ctx context.Context) (res GetPlansRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/plans"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetPlansResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetRequestTransformation invokes getRequestTransformation operation.
//
// Route に登録したリクエスト変換情報を取得します。.
//
// GET /services/{serviceId}/routes/{routeId}/request
func (c *Client) GetRequestTransformation(ctx context.Context, params GetRequestTransformationParams) (GetRequestTransformationRes, error) {
	res, err := c.sendGetRequestTransformation(ctx, params)
	return res, err
}

func (c *Client) sendGetRequestTransformation(ctx context.Context, params GetRequestTransformationParams) (res GetRequestTransformationRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/services/"
	{
		// Encode "serviceId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "serviceId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.ServiceId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/routes/"
	{
		// Encode "routeId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "routeId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.RouteId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/request"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetRequestTransformationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetResponseTransformation invokes getResponseTransformation operation.
//
// Route に登録したレスポンス変換情報を取得します。.
//
// GET /services/{serviceId}/routes/{routeId}/response
func (c *Client) GetResponseTransformation(ctx context.Context, params GetResponseTransformationParams) (GetResponseTransformationRes, error) {
	res, err := c.sendGetResponseTransformation(ctx, params)
	return res, err
}

func (c *Client) sendGetResponseTransformation(ctx context.Context, params GetResponseTransformationParams) (res GetResponseTransformationRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/services/"
	{
		// Encode "serviceId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "serviceId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.ServiceId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/routes/"
	{
		// Encode "routeId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "routeId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.RouteId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/response"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetResponseTransformationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetRoute invokes getRoute operation.
//
// Service に登録した Route の詳細情報を取得します。.
//
// GET /services/{serviceId}/routes/{routeId}
func (c *Client) GetRoute(ctx context.Context, params GetRouteParams) (GetRouteRes, error) {
	res, err := c.sendGetRoute(ctx, params)
	return res, err
}

func (c *Client) sendGetRoute(ctx context.Context, params GetRouteParams) (res GetRouteRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/services/"
	{
		// Encode "serviceId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "serviceId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.ServiceId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/routes/"
	{
		// Encode "routeId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "routeId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.RouteId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetRouteResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetRouteAuthorization invokes getRouteAuthorization operation.
//
// Route に登録した認可情報を取得します。.
//
// GET /services/{serviceId}/routes/{routeId}/authorization
func (c *Client) GetRouteAuthorization(ctx context.Context, params GetRouteAuthorizationParams) (GetRouteAuthorizationRes, error) {
	res, err := c.sendGetRouteAuthorization(ctx, params)
	return res, err
}

func (c *Client) sendGetRouteAuthorization(ctx context.Context, params GetRouteAuthorizationParams) (res GetRouteAuthorizationRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/services/"
	{
		// Encode "serviceId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "serviceId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.ServiceId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/routes/"
	{
		// Encode "routeId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "routeId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.RouteId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/authorization"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetRouteAuthorizationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetServiceById invokes getServiceById operation.
//
// 登録した Service の詳細情報を取得します。.
//
// GET /services/{serviceId}
func (c *Client) GetServiceById(ctx context.Context, params GetServiceByIdParams) (GetServiceByIdRes, error) {
	res, err := c.sendGetServiceById(ctx, params)
	return res, err
}

func (c *Client) sendGetServiceById(ctx context.Context, params GetServiceByIdParams) (res GetServiceByIdRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/services/"
	{
		// Encode "serviceId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "serviceId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.ServiceId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetServiceByIdResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetServiceRoutes invokes getServiceRoutes operation.
//
// Service に登録した Route の一覧を取得します。.
//
// GET /services/{serviceId}/routes
func (c *Client) GetServiceRoutes(ctx context.Context, params GetServiceRoutesParams) (GetServiceRoutesRes, error) {
	res, err := c.sendGetServiceRoutes(ctx, params)
	return res, err
}

func (c *Client) sendGetServiceRoutes(ctx context.Context, params GetServiceRoutesParams) (res GetServiceRoutesRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/services/"
	{
		// Encode "serviceId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "serviceId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.ServiceId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/routes"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetServiceRoutesResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetServices invokes getServices operation.
//
// 登録した Service の一覧を取得します。.
//
// GET /services
func (c *Client) GetServices(ctx context.Context) (GetServicesRes, error) {
	res, err := c.sendGetServices(ctx)
	return res, err
}

func (c *Client) sendGetServices(ctx context.Context) (res GetServicesRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/services"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetServicesResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetSubscription invokes getSubscription operation.
//
// お客様の API Gateway 契約状態を取得します。<br>
// 契約情報が存在しない場合は、未契約のステータスを返却します。<br>
// 契約情報が存在する場合は、契約中のステータスと加入中のプラン情報を返却します。.
//
// GET /subscriptions
func (c *Client) GetSubscription(ctx context.Context) (GetSubscriptionRes, error) {
	res, err := c.sendGetSubscription(ctx)
	return res, err
}

func (c *Client) sendGetSubscription(ctx context.Context) (res GetSubscriptionRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/subscriptions"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetSubscriptionResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetUser invokes getUser operation.
//
// 登録した User の詳細情報を取得します。.
//
// GET /users/{userId}
func (c *Client) GetUser(ctx context.Context, params GetUserParams) (GetUserRes, error) {
	res, err := c.sendGetUser(ctx, params)
	return res, err
}

func (c *Client) sendGetUser(ctx context.Context, params GetUserParams) (res GetUserRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/users/"
	{
		// Encode "userId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "userId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.UserId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetUserResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetUserAuthentication invokes getUserAuthentication operation.
//
// User に登録された認証情報を取得します。<br>
// なお、パスワード、シークレットなどの機密情報は取得できません。.
//
// GET /users/{userId}/authentication
func (c *Client) GetUserAuthentication(ctx context.Context, params GetUserAuthenticationParams) (GetUserAuthenticationRes, error) {
	res, err := c.sendGetUserAuthentication(ctx, params)
	return res, err
}

func (c *Client) sendGetUserAuthentication(ctx context.Context, params GetUserAuthenticationParams) (res GetUserAuthenticationRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/users/"
	{
		// Encode "userId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "userId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.UserId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/authentication"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetUserAuthenticationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetUserGroup invokes getUserGroup operation.
//
// 登録した User が所属している Group の一覧を取得します。.
//
// GET /users/{userId}/groups
func (c *Client) GetUserGroup(ctx context.Context, params GetUserGroupParams) (GetUserGroupRes, error) {
	res, err := c.sendGetUserGroup(ctx, params)
	return res, err
}

func (c *Client) sendGetUserGroup(ctx context.Context, params GetUserGroupParams) (res GetUserGroupRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/users/"
	{
		// Encode "userId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "userId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.UserId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/groups"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetUserGroupResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetUsers invokes getUsers operation.
//
// 登録した User の一覧を取得します。.
//
// GET /users
func (c *Client) GetUsers(ctx context.Context) (GetUsersRes, error) {
	res, err := c.sendGetUsers(ctx)
	return res, err
}

func (c *Client) sendGetUsers(ctx context.Context) (res GetUsersRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/users"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetUsersResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// Subscribe invokes subscribe operation.
//
// 選択したプランで API Gateway の利用契約を行います。.
//
// POST /subscriptions
func (c *Client) Subscribe(ctx context.Context, request *SubscriptionOption) (SubscribeRes, error) {
	res, err := c.sendSubscribe(ctx, request)
	return res, err
}

func (c *Client) sendSubscribe(ctx context.Context, request *SubscriptionOption) (res SubscribeRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/subscriptions"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeSubscribeRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSubscribeResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// Unsubscribe invokes unsubscribe operation.
//
// API Gateway の契約を解約します。.
//
// DELETE /subscriptions
func (c *Client) Unsubscribe(ctx context.Context) (UnsubscribeRes, error) {
	res, err := c.sendUnsubscribe(ctx)
	return res, err
}

func (c *Client) sendUnsubscribe(ctx context.Context) (res UnsubscribeRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/subscriptions"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUnsubscribeResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpdateCertificate invokes updateCertificate operation.
//
// 登録した Certificate の詳細情報を更新します。.
//
// PUT /certificates/{certificateId}
func (c *Client) UpdateCertificate(ctx context.Context, request *Certificate, params UpdateCertificateParams) (UpdateCertificateRes, error) {
	res, err := c.sendUpdateCertificate(ctx, request, params)
	return res, err
}

func (c *Client) sendUpdateCertificate(ctx context.Context, request *Certificate, params UpdateCertificateParams) (res UpdateCertificateRes, err error) {
	// Validate request before sending.
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/certificates/"
	{
		// Encode "certificateId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "certificateId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.CertificateId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpdateCertificateRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpdateCertificateResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpdateDomain invokes updateDomain operation.
//
// 登録した Domain
// の証明書情報を更新します。<br>ドメイン名の変更はできません。.
//
// PUT /domains/{domainId}
func (c *Client) UpdateDomain(ctx context.Context, request *DomainPUT, params UpdateDomainParams) (UpdateDomainRes, error) {
	res, err := c.sendUpdateDomain(ctx, request, params)
	return res, err
}

func (c *Client) sendUpdateDomain(ctx context.Context, request *DomainPUT, params UpdateDomainParams) (res UpdateDomainRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/domains/"
	{
		// Encode "domainId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "domainId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.DomainId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpdateDomainRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpdateDomainResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpdateGroup invokes updateGroup operation.
//
// 登録した Group の詳細情報を更新します。.
//
// PUT /groups/{groupId}
func (c *Client) UpdateGroup(ctx context.Context, request *Group, params UpdateGroupParams) (UpdateGroupRes, error) {
	res, err := c.sendUpdateGroup(ctx, request, params)
	return res, err
}

func (c *Client) sendUpdateGroup(ctx context.Context, request *Group, params UpdateGroupParams) (res UpdateGroupRes, err error) {
	// Validate request before sending.
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/groups/"
	{
		// Encode "groupId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "groupId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.GroupId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpdateGroupRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpdateGroupResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpdateOidc invokes updateOidc operation.
//
// 登録した OIDC認証 を更新します。.
//
// PUT /oidc/{oidcId}
func (c *Client) UpdateOidc(ctx context.Context, request *Oidc, params UpdateOidcParams) (UpdateOidcRes, error) {
	res, err := c.sendUpdateOidc(ctx, request, params)
	return res, err
}

func (c *Client) sendUpdateOidc(ctx context.Context, request *Oidc, params UpdateOidcParams) (res UpdateOidcRes, err error) {
	// Validate request before sending.
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/oidc/"
	{
		// Encode "oidcId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "oidcId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.OidcId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpdateOidcRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpdateOidcResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpdateRoute invokes updateRoute operation.
//
// Service に登録した Route の詳細情報を更新します。.
//
// PUT /services/{serviceId}/routes/{routeId}
func (c *Client) UpdateRoute(ctx context.Context, request *RouteDetail, params UpdateRouteParams) (UpdateRouteRes, error) {
	res, err := c.sendUpdateRoute(ctx, request, params)
	return res, err
}

func (c *Client) sendUpdateRoute(ctx context.Context, request *RouteDetail, params UpdateRouteParams) (res UpdateRouteRes, err error) {
	// Validate request before sending.
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/services/"
	{
		// Encode "serviceId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "serviceId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.ServiceId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/routes/"
	{
		// Encode "routeId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "routeId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.RouteId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpdateRouteRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpdateRouteResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpdateService invokes updateService operation.
//
// 登録した Service の詳細情報を更新します。.
//
// PUT /services/{serviceId}
func (c *Client) UpdateService(ctx context.Context, request *ServiceDetail, params UpdateServiceParams) (UpdateServiceRes, error) {
	res, err := c.sendUpdateService(ctx, request, params)
	return res, err
}

func (c *Client) sendUpdateService(ctx context.Context, request *ServiceDetail, params UpdateServiceParams) (res UpdateServiceRes, err error) {
	// Validate request before sending.
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/services/"
	{
		// Encode "serviceId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "serviceId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.ServiceId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpdateServiceRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpdateServiceResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpdateSubscription invokes updateSubscription operation.
//
// 選択したプランで API Gateway の契約内容を更新します。.
//
// PUT /subscriptions
func (c *Client) UpdateSubscription(ctx context.Context, request *SubscriptionOption) (UpdateSubscriptionRes, error) {
	res, err := c.sendUpdateSubscription(ctx, request)
	return res, err
}

func (c *Client) sendUpdateSubscription(ctx context.Context, request *SubscriptionOption) (res UpdateSubscriptionRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/subscriptions"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpdateSubscriptionRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpdateSubscriptionResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpdateUser invokes updateUser operation.
//
// 登録した User の詳細情報を更新します。.
//
// PUT /users/{userId}
func (c *Client) UpdateUser(ctx context.Context, request *UserDetail, params UpdateUserParams) (UpdateUserRes, error) {
	res, err := c.sendUpdateUser(ctx, request, params)
	return res, err
}

func (c *Client) sendUpdateUser(ctx context.Context, request *UserDetail, params UpdateUserParams) (res UpdateUserRes, err error) {
	// Validate request before sending.
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/users/"
	{
		// Encode "userId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "userId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.UserId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpdateUserRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpdateUserResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpdateUserGroup invokes updateUserGroup operation.
//
// 登録した User を Group に所属させます。.
//
// PUT /users/{userId}/groups
func (c *Client) UpdateUserGroup(ctx context.Context, request jx.Raw, params UpdateUserGroupParams) (UpdateUserGroupRes, error) {
	res, err := c.sendUpdateUserGroup(ctx, request, params)
	return res, err
}

func (c *Client) sendUpdateUserGroup(ctx context.Context, request jx.Raw, params UpdateUserGroupParams) (res UpdateUserGroupRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/users/"
	{
		// Encode "userId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "userId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.UserId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/groups"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpdateUserGroupRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpdateUserGroupResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpsertRequestTransformation invokes upsertRequestTransformation operation.
//
// Route から Service
// へ転送する際にリクエスト内容を変換する設定を登録します。
// - **httpMethod**: 設定したHTTPメソッドへ変換します。
// - **allow**: 設定した Key 以外をリクエストから取り除きます。
// - **remove**: 設定した Key をリクエストから取り除きます。
// - **rename**: 設定した From-To に従い、リクエストの Key を変更します。
// - **replace**: 設定した Key と同名の Key がリクエストに存在する場合、Value
// の値を置換します。
// - **add**: 設定した値をリクエストに追加します。同名の Key
// がリクエストに存在しない場合に機能します。
// - **append**: 設定した値をリクエストに追加します。同名の Key
// がリクエストに存在する場合は Value に追記します。.
//
// PUT /services/{serviceId}/routes/{routeId}/request
func (c *Client) UpsertRequestTransformation(ctx context.Context, request OptRequestTransformation, params UpsertRequestTransformationParams) (UpsertRequestTransformationRes, error) {
	res, err := c.sendUpsertRequestTransformation(ctx, request, params)
	return res, err
}

func (c *Client) sendUpsertRequestTransformation(ctx context.Context, request OptRequestTransformation, params UpsertRequestTransformationParams) (res UpsertRequestTransformationRes, err error) {
	// Validate request before sending.
	if err := func() error {
		if value, ok := request.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/services/"
	{
		// Encode "serviceId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "serviceId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.ServiceId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/routes/"
	{
		// Encode "routeId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "routeId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.RouteId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/request"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpsertRequestTransformationRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpsertRequestTransformationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpsertResponseTransformation invokes upsertResponseTransformation operation.
//
// Route から Service
// へ転送する際にレスポンス内容を変換する設定を登録します。
// - **allow**: 設定した Key 以外をレスポンスから取り除きます。
// - **remove**: 設定した Key をレスポンスから取り除きます。
// - **rename**: 設定した From-To に従い、レスポンスの Key を変更します。
// - **replace**: 設定した Key と同名の Key がレスポンスに存在する場合、Value
// の値を置換します。
// - **add**: 設定した値をレスポンスに追加します。同名の Key
// がレスポンスに存在しない場合に機能します。
// - **append**: 設定した値をレスポンスに追加します。同名の Key
// がレスポンスに存在する場合は Value に追記します。
// - **ifStatusCode**:
// 設定した場合、アップストリームからのレスポンスコードが設定した値と一致する場合に、各種変換が機能します。.
//
// PUT /services/{serviceId}/routes/{routeId}/response
func (c *Client) UpsertResponseTransformation(ctx context.Context, request OptResponseTransformation, params UpsertResponseTransformationParams) (UpsertResponseTransformationRes, error) {
	res, err := c.sendUpsertResponseTransformation(ctx, request, params)
	return res, err
}

func (c *Client) sendUpsertResponseTransformation(ctx context.Context, request OptResponseTransformation, params UpsertResponseTransformationParams) (res UpsertResponseTransformationRes, err error) {
	// Validate request before sending.
	if err := func() error {
		if value, ok := request.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/services/"
	{
		// Encode "serviceId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "serviceId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.ServiceId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/routes/"
	{
		// Encode "routeId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "routeId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.RouteId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/response"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpsertResponseTransformationRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpsertResponseTransformationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpsertRouteAuthorization invokes upsertRouteAuthorization operation.
//
// 登録した Route に対してアクセス可能な Group を登録します。<br>
// 登録しない場合は全てのUserがアクセス可能になります。.
//
// PUT /services/{serviceId}/routes/{routeId}/authorization
func (c *Client) UpsertRouteAuthorization(ctx context.Context, request OptRouteAuthorizationDetail, params UpsertRouteAuthorizationParams) (UpsertRouteAuthorizationRes, error) {
	res, err := c.sendUpsertRouteAuthorization(ctx, request, params)
	return res, err
}

func (c *Client) sendUpsertRouteAuthorization(ctx context.Context, request OptRouteAuthorizationDetail, params UpsertRouteAuthorizationParams) (res UpsertRouteAuthorizationRes, err error) {
	// Validate request before sending.
	if err := func() error {
		if value, ok := request.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/services/"
	{
		// Encode "serviceId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "serviceId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.ServiceId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/routes/"
	{
		// Encode "routeId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "routeId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.RouteId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/authorization"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpsertRouteAuthorizationRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpsertRouteAuthorizationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpsertUserAuthentication invokes upsertUserAuthentication operation.
//
// User に認証情報を登録します。.
//
// PUT /users/{userId}/authentication
func (c *Client) UpsertUserAuthentication(ctx context.Context, request OptUserAuthentication, params UpsertUserAuthenticationParams) (UpsertUserAuthenticationRes, error) {
	res, err := c.sendUpsertUserAuthentication(ctx, request, params)
	return res, err
}

func (c *Client) sendUpsertUserAuthentication(ctx context.Context, request OptUserAuthentication, params UpsertUserAuthenticationParams) (res UpsertUserAuthenticationRes, err error) {
	// Validate request before sending.
	if err := func() error {
		if value, ok := request.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/users/"
	{
		// Encode "userId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "userId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.UserId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/authentication"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpsertUserAuthenticationRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpsertUserAuthenticationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}
