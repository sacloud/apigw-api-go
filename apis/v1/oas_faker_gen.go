// Code generated by ogen, DO NOT EDIT.

package v1

import (
	"time"

	"github.com/go-faster/jx"
	"github.com/google/uuid"
)

// SetFake set fake values.
func (s *AddCertificateBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddCertificateBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *AddCertificateConflict) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddCertificateConflict(unwrapped)
}

// SetFake set fake values.
func (s *AddCertificateCreated) SetFake() {
	{
		{
			s.Apigw.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AddCertificateCreatedApigw) SetFake() {
	{
		{
			s.Certificate.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AddCertificateInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddCertificateInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *AddCertificateUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddCertificateUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *AddCertificateUnprocessableEntity) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddCertificateUnprocessableEntity(unwrapped)
}

// SetFake set fake values.
func (s *AddDomainBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddDomainBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *AddDomainConflict) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddDomainConflict(unwrapped)
}

// SetFake set fake values.
func (s *AddDomainCreated) SetFake() {
	{
		{
			s.Apigw.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AddDomainCreatedApigw) SetFake() {
	{
		{
			s.Domain.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AddDomainInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddDomainInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *AddDomainUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddDomainUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *AddGroupBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddGroupBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *AddGroupConflict) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddGroupConflict(unwrapped)
}

// SetFake set fake values.
func (s *AddGroupCreated) SetFake() {
	{
		{
			s.Apigw.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AddGroupCreatedApigw) SetFake() {
	{
		{
			s.Group.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AddGroupInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddGroupInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *AddGroupUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddGroupUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *AddOidcBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddOidcBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *AddOidcConflict) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddOidcConflict(unwrapped)
}

// SetFake set fake values.
func (s *AddOidcCreated) SetFake() {
	{
		{
			s.Apigw.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AddOidcCreatedApigw) SetFake() {
	{
		{
			s.Oidc.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AddOidcInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddOidcInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *AddOidcNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddOidcNotFound(unwrapped)
}

// SetFake set fake values.
func (s *AddOidcUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddOidcUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *AddOidcUnprocessableEntity) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddOidcUnprocessableEntity(unwrapped)
}

// SetFake set fake values.
func (s *AddRouteBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddRouteBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *AddRouteConflict) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddRouteConflict(unwrapped)
}

// SetFake set fake values.
func (s *AddRouteCreated) SetFake() {
	{
		{
			s.Apigw = []byte("null")
		}
	}
}

// SetFake set fake values.
func (s *AddRouteInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddRouteInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *AddRouteNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddRouteNotFound(unwrapped)
}

// SetFake set fake values.
func (s *AddRouteUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddRouteUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *AddServiceBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddServiceBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *AddServiceConflict) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddServiceConflict(unwrapped)
}

// SetFake set fake values.
func (s *AddServiceInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddServiceInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *AddServiceNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddServiceNotFound(unwrapped)
}

// SetFake set fake values.
func (s *AddServiceOK) SetFake() {
	{
		{
			s.Apigw.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AddServiceOKApigw) SetFake() {
	{
		{
			s.Service.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AddServiceUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddServiceUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *AddServiceUnprocessableEntity) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddServiceUnprocessableEntity(unwrapped)
}

// SetFake set fake values.
func (s *AddUserBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddUserBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *AddUserConflict) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddUserConflict(unwrapped)
}

// SetFake set fake values.
func (s *AddUserCreated) SetFake() {
	{
		{
			s.Apigw.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AddUserCreatedApigw) SetFake() {
	{
		{
			s.User.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AddUserInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = AddUserInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *AuthenticationMethods) SetFake() {
	var unwrapped []AuthenticationMethodsItem
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem AuthenticationMethodsItem
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = AuthenticationMethods(unwrapped)
}

// SetFake set fake values.
func (s *AuthenticationMethodsItem) SetFake() {
	*s = AuthenticationMethodsItemAuthorizationCodeFlow
}

// SetFake set fake values.
func (s *BasicAuth) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.UserName = "string"
		}
	}
	{
		{
			s.Password = "string"
		}
	}
}

// SetFake set fake values.
func (s *Certificate) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Rsa.SetFake()
		}
	}
	{
		{
			s.Ecdsa.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CertificateDetails) SetFake() {
	{
		{
			s.Cert.SetFake()
		}
	}
	{
		{
			s.Key.SetFake()
		}
	}
	{
		{
			s.ExpiredAt.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DeleteCertificateBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteCertificateBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *DeleteCertificateInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteCertificateInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *DeleteCertificateNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteCertificateNotFound(unwrapped)
}

// SetFake set fake values.
func (s *DeleteCertificateUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteCertificateUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *DeleteDomainBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteDomainBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *DeleteDomainInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteDomainInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *DeleteDomainNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteDomainNotFound(unwrapped)
}

// SetFake set fake values.
func (s *DeleteDomainUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteDomainUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *DeleteGroupBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteGroupBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *DeleteGroupInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteGroupInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *DeleteGroupNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteGroupNotFound(unwrapped)
}

// SetFake set fake values.
func (s *DeleteGroupUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteGroupUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *DeleteOidcBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteOidcBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *DeleteOidcConflict) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteOidcConflict(unwrapped)
}

// SetFake set fake values.
func (s *DeleteOidcInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteOidcInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *DeleteOidcNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteOidcNotFound(unwrapped)
}

// SetFake set fake values.
func (s *DeleteOidcUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteOidcUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *DeleteRouteBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteRouteBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *DeleteRouteInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteRouteInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *DeleteRouteNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteRouteNotFound(unwrapped)
}

// SetFake set fake values.
func (s *DeleteRouteUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteRouteUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *DeleteServiceBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteServiceBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *DeleteServiceInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteServiceInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *DeleteServiceNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteServiceNotFound(unwrapped)
}

// SetFake set fake values.
func (s *DeleteServiceUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteServiceUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *DeleteUserBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteUserBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *DeleteUserInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteUserInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *DeleteUserNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = DeleteUserNotFound(unwrapped)
}

// SetFake set fake values.
func (s *Domain) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.DomainName = "string"
		}
	}
	{
		{
			s.CertificateId.SetFake()
		}
	}
	{
		{
			s.CertificateName.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DomainPUT) SetFake() {
	{
		{
			s.CertificateId.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ErrorSchema) SetFake() {
	{
		{
			s.Message.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GetCertificatesBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetCertificatesBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *GetCertificatesInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetCertificatesInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *GetCertificatesOK) SetFake() {
	{
		{
			s.Apigw = []byte("null")
		}
	}
}

// SetFake set fake values.
func (s *GetCertificatesUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetCertificatesUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *GetDomainsBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetDomainsBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *GetDomainsInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetDomainsInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *GetDomainsOK) SetFake() {
	{
		{
			s.Apigw = []byte("null")
		}
	}
}

// SetFake set fake values.
func (s *GetDomainsUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetDomainsUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *GetGroupBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetGroupBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *GetGroupInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetGroupInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *GetGroupNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetGroupNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GetGroupOK) SetFake() {
	{
		{
			s.Apigw.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GetGroupOKApigw) SetFake() {
	{
		{
			s.Group.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GetGroupsBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetGroupsBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *GetGroupsInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetGroupsInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *GetGroupsOK) SetFake() {
	{
		{
			s.Apigw = []byte("null")
		}
	}
}

// SetFake set fake values.
func (s *GetGroupsUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetGroupsUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *GetOidcBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetOidcBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *GetOidcByIdBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetOidcByIdBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *GetOidcByIdInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetOidcByIdInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *GetOidcByIdNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetOidcByIdNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GetOidcByIdOKApplicationJSON) SetFake() {
	var unwrapped jx.Raw
	{
		unwrapped = []byte("null")
	}
	*s = GetOidcByIdOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *GetOidcByIdUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetOidcByIdUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *GetOidcInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetOidcInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *GetOidcNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetOidcNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GetOidcOKApplicationJSON) SetFake() {
	var unwrapped jx.Raw
	{
		unwrapped = []byte("null")
	}
	*s = GetOidcOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *GetOidcUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetOidcUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *GetPlansOK) SetFake() {
	{
		{
			s.Apigw = []byte("null")
		}
	}
}

// SetFake set fake values.
func (s *GetRequestTransformationBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetRequestTransformationBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *GetRequestTransformationInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetRequestTransformationInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *GetRequestTransformationNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetRequestTransformationNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GetRequestTransformationOKApplicationJSON) SetFake() {
	var unwrapped jx.Raw
	{
		unwrapped = []byte("null")
	}
	*s = GetRequestTransformationOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *GetRequestTransformationUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetRequestTransformationUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *GetResponseTransformationBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetResponseTransformationBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *GetResponseTransformationInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetResponseTransformationInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *GetResponseTransformationNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetResponseTransformationNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GetResponseTransformationOKApplicationJSON) SetFake() {
	var unwrapped jx.Raw
	{
		unwrapped = []byte("null")
	}
	*s = GetResponseTransformationOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *GetResponseTransformationUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetResponseTransformationUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *GetRouteAuthorizationBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetRouteAuthorizationBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *GetRouteAuthorizationInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetRouteAuthorizationInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *GetRouteAuthorizationNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetRouteAuthorizationNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GetRouteAuthorizationOKApplicationJSON) SetFake() {
	var unwrapped jx.Raw
	{
		unwrapped = []byte("null")
	}
	*s = GetRouteAuthorizationOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *GetRouteAuthorizationUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetRouteAuthorizationUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *GetRouteBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetRouteBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *GetRouteInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetRouteInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *GetRouteNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetRouteNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GetRouteOKApplicationJSON) SetFake() {
	var unwrapped jx.Raw
	{
		unwrapped = []byte("null")
	}
	*s = GetRouteOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *GetRouteUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetRouteUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *GetServiceByIdBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetServiceByIdBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *GetServiceByIdInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetServiceByIdInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *GetServiceByIdNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetServiceByIdNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GetServiceByIdOK) SetFake() {
	{
		{
			s.Apigw.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GetServiceByIdOKApigw) SetFake() {
	{
		{
			s.Service.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GetServiceRoutesBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetServiceRoutesBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *GetServiceRoutesInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetServiceRoutesInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *GetServiceRoutesNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetServiceRoutesNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GetServiceRoutesOK) SetFake() {
	{
		{
			s.Apigw = []byte("null")
		}
	}
}

// SetFake set fake values.
func (s *GetServiceRoutesUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetServiceRoutesUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *GetServicesBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetServicesBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *GetServicesInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetServicesInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *GetServicesOK) SetFake() {
	{
		{
			s.Apigw = []byte("null")
		}
	}
}

// SetFake set fake values.
func (s *GetServicesUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetServicesUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *GetSubscriptionInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetSubscriptionInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *GetSubscriptionOK) SetFake() {
	{
		{
			s.Apigw.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GetSubscriptionOKApigw) SetFake() {
	{
		{
			s.Subscription.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GetSubscriptionUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetSubscriptionUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *GetUserAuthenticationBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetUserAuthenticationBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *GetUserAuthenticationInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetUserAuthenticationInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *GetUserAuthenticationNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetUserAuthenticationNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GetUserAuthenticationOK) SetFake() {
	{
		{
			s.Apigw.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GetUserAuthenticationOKApigw) SetFake() {
	{
		{
			s.UserAuthentication.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GetUserAuthenticationUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetUserAuthenticationUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *GetUserBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetUserBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *GetUserGroupBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetUserGroupBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *GetUserGroupInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetUserGroupInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *GetUserGroupNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetUserGroupNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GetUserGroupOK) SetFake() {
	{
		{
			s.Apigw.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GetUserGroupOKApigw) SetFake() {
	{
		{
			s.Groups = nil
			for i := 0; i < 0; i++ {
				var elem UserGroupDetail
				{
					elem.SetFake()
				}
				s.Groups = append(s.Groups, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *GetUserInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetUserInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *GetUserNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetUserNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GetUserOK) SetFake() {
	{
		{
			s.Apigw.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GetUserOKApigw) SetFake() {
	{
		{
			s.User.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GetUserUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetUserUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *GetUsersBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetUsersBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *GetUsersInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetUsersInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *GetUsersOK) SetFake() {
	{
		{
			s.Apigw.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GetUsersOKApigw) SetFake() {
	{
		{
			s.Users = nil
			for i := 0; i < 0; i++ {
				var elem User
				{
					elem.SetFake()
				}
				s.Users = append(s.Users, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *GetUsersUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = GetUsersUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *Group) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Tags.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *HTTPMethod) SetFake() {
	*s = HTTPMethodGET
}

// SetFake set fake values.
func (s *HmacAuth) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.UserName = "string"
		}
	}
	{
		{
			s.Secret = "string"
		}
	}
}

// SetFake set fake values.
func (s *JSONKey) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = JSONKey(unwrapped)
}

// SetFake set fake values.
func (s *Jwt) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.Key = "string"
		}
	}
	{
		{
			s.Secret = "string"
		}
	}
	{
		{
			s.Algorithm.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *JwtAlgorithm) SetFake() {
	*s = JwtAlgorithmHS256
}

// SetFake set fake values.
func (s *Name) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = Name(unwrapped)
}

// SetFake set fake values.
func (s *Oidc) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Protocols = nil
			for i := 0; i < 0; i++ {
				var elem OidcProtocolsItem
				{
					elem.SetFake()
				}
				s.Protocols = append(s.Protocols, elem)
			}
		}
	}
	{
		{
			s.AuthenticationMethods.SetFake()
		}
	}
	{
		{
			s.Issuer = "string"
		}
	}
	{
		{
			s.ClientId = "string"
		}
	}
	{
		{
			s.ClientSecret = "string"
		}
	}
	{
		{
			s.Scopes = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Scopes = append(s.Scopes, elem)
			}
		}
	}
	{
		{
			s.HideCredentials.SetFake()
		}
	}
	{
		{
			s.TokenAudiences = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.TokenAudiences = append(s.TokenAudiences, elem)
			}
		}
	}
	{
		{
			s.RefreshTokenParamName.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OidcProtocolsItem) SetFake() {
	*s = OidcProtocolsItemHTTP
}

// SetFake set fake values.
func (s *OptBasicAuth) SetFake() {
	var elem BasicAuth
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptBool) SetFake() {
	var elem bool
	{
		elem = true
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptCertificate) SetFake() {
	var elem Certificate
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptCertificateDetails) SetFake() {
	var elem CertificateDetails
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptDateTime) SetFake() {
	var elem time.Time
	{
		elem = time.Now()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptDomain) SetFake() {
	var elem Domain
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptFloat64) SetFake() {
	var elem float64
	{
		elem = float64(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptGroup) SetFake() {
	var elem Group
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptHTTPMethod) SetFake() {
	var elem HTTPMethod
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptHmacAuth) SetFake() {
	var elem HmacAuth
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptInt) SetFake() {
	var elem int
	{
		elem = int(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptInt64) SetFake() {
	var elem int64
	{
		elem = int64(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptJSONKey) SetFake() {
	var elem JSONKey
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptJwt) SetFake() {
	var elem Jwt
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptName) SetFake() {
	var elem Name
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptOidc) SetFake() {
	var elem Oidc
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptPlan) SetFake() {
	var elem Plan
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptPlanMaxRequestsUnit) SetFake() {
	var elem PlanMaxRequestsUnit
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptQueryParamKey) SetFake() {
	var elem QueryParamKey
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptQueryParamValue) SetFake() {
	var elem QueryParamValue
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptRequestAllowDetail) SetFake() {
	var elem RequestAllowDetail
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptRequestHeaderKey) SetFake() {
	var elem RequestHeaderKey
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptRequestHeaderValue) SetFake() {
	var elem RequestHeaderValue
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptRequestRemoveDetail) SetFake() {
	var elem RequestRemoveDetail
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptRequestRenameDetail) SetFake() {
	var elem RequestRenameDetail
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptRequestTransformation) SetFake() {
	var elem RequestTransformation
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptResponseAllowDetail) SetFake() {
	var elem ResponseAllowDetail
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptResponseHeaderKey) SetFake() {
	var elem ResponseHeaderKey
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptResponseModification) SetFake() {
	var elem ResponseModification
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptResponseModificationDetail) SetFake() {
	var elem ResponseModificationDetail
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptResponseRemoveDetail) SetFake() {
	var elem ResponseRemoveDetail
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptResponseRenameDetail) SetFake() {
	var elem ResponseRenameDetail
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptResponseReplaceDetail) SetFake() {
	var elem ResponseReplaceDetail
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptResponseTransformation) SetFake() {
	var elem ResponseTransformation
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptRouteAuthorizationDetail) SetFake() {
	var elem RouteAuthorizationDetail
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptRouteDetailHttpsRedirectStatusCode) SetFake() {
	var elem RouteDetailHttpsRedirectStatusCode
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptRouteDetailProtocols) SetFake() {
	var elem RouteDetailProtocols
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptServiceDetail) SetFake() {
	var elem ServiceDetail
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptServiceDetailAuthentication) SetFake() {
	var elem ServiceDetailAuthentication
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptString) SetFake() {
	var elem string
	{
		elem = "string"
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSubscribedStatus) SetFake() {
	var elem SubscribedStatus
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSubscriptionStatus) SetFake() {
	var elem SubscriptionStatus
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptUUID) SetFake() {
	var elem uuid.UUID
	{
		elem = uuid.New()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptUnsubscribedStatus) SetFake() {
	var elem UnsubscribedStatus
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptUserAuthentication) SetFake() {
	var elem UserAuthentication
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptUserDetail) SetFake() {
	var elem UserDetail
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *Plan) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Price.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.MaxServices.SetFake()
		}
	}
	{
		{
			s.MaxRequests.SetFake()
		}
	}
	{
		{
			s.MaxRequestsUnit.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PlanMaxRequestsUnit) SetFake() {
	*s = PlanMaxRequestsUnitSecond
}

// SetFake set fake values.
func (s *QueryParamKey) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = QueryParamKey(unwrapped)
}

// SetFake set fake values.
func (s *QueryParamValue) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = QueryParamValue(unwrapped)
}

// SetFake set fake values.
func (s *RequestAllowDetail) SetFake() {
	{
		{
			s.Body = nil
			for i := 0; i < 0; i++ {
				var elem JSONKey
				{
					elem.SetFake()
				}
				s.Body = append(s.Body, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *RequestHeaderKey) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = RequestHeaderKey(unwrapped)
}

// SetFake set fake values.
func (s *RequestHeaderValue) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = RequestHeaderValue(unwrapped)
}

// SetFake set fake values.
func (s *RequestRemoveDetail) SetFake() {
	{
		{
			s.HeaderKeys = nil
			for i := 0; i < 0; i++ {
				var elem RequestHeaderKey
				{
					elem.SetFake()
				}
				s.HeaderKeys = append(s.HeaderKeys, elem)
			}
		}
	}
	{
		{
			s.QueryParams = nil
			for i := 0; i < 0; i++ {
				var elem QueryParamKey
				{
					elem.SetFake()
				}
				s.QueryParams = append(s.QueryParams, elem)
			}
		}
	}
	{
		{
			s.Body = nil
			for i := 0; i < 0; i++ {
				var elem JSONKey
				{
					elem.SetFake()
				}
				s.Body = append(s.Body, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *RequestRenameDetail) SetFake() {
	{
		{
			s.Headers = nil
			for i := 0; i < 0; i++ {
				var elem RequestRenameDetailHeadersItem
				{
					elem.SetFake()
				}
				s.Headers = append(s.Headers, elem)
			}
		}
	}
	{
		{
			s.QueryParams = nil
			for i := 0; i < 0; i++ {
				var elem RequestRenameDetailQueryParamsItem
				{
					elem.SetFake()
				}
				s.QueryParams = append(s.QueryParams, elem)
			}
		}
	}
	{
		{
			s.Body = nil
			for i := 0; i < 0; i++ {
				var elem RequestRenameDetailBodyItem
				{
					elem.SetFake()
				}
				s.Body = append(s.Body, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *RequestRenameDetailBodyItem) SetFake() {
	{
		{
			s.From.SetFake()
		}
	}
	{
		{
			s.To.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *RequestRenameDetailHeadersItem) SetFake() {
	{
		{
			s.From.SetFake()
		}
	}
	{
		{
			s.To.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *RequestRenameDetailQueryParamsItem) SetFake() {
	{
		{
			s.From.SetFake()
		}
	}
	{
		{
			s.To.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *RequestTransformation) SetFake() {
	{
		{
			s.HttpMethod.SetFake()
		}
	}
	{
		{
			s.Allow.SetFake()
		}
	}
	{
		{
			s.Remove.SetFake()
		}
	}
	{
		{
			s.Rename.SetFake()
		}
	}
	{
		{
			s.Replace.SetFake()
		}
	}
	{
		{
			s.Add.SetFake()
		}
	}
	{
		{
			s.Append.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ResponseAllowDetail) SetFake() {
	{
		{
			s.JsonKeys = nil
			for i := 0; i < 0; i++ {
				var elem JSONKey
				{
					elem.SetFake()
				}
				s.JsonKeys = append(s.JsonKeys, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ResponseHeaderKey) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = ResponseHeaderKey(unwrapped)
}

// SetFake set fake values.
func (s *ResponseModification) SetFake() {
	{
		{
			s.Headers = nil
			for i := 0; i < 0; i++ {
				var elem ResponseModificationHeadersItem
				{
					elem.SetFake()
				}
				s.Headers = append(s.Headers, elem)
			}
		}
	}
	{
		{
			s.QueryParams = nil
			for i := 0; i < 0; i++ {
				var elem ResponseModificationQueryParamsItem
				{
					elem.SetFake()
				}
				s.QueryParams = append(s.QueryParams, elem)
			}
		}
	}
	{
		{
			s.Body = nil
			for i := 0; i < 0; i++ {
				var elem ResponseModificationBodyItem
				{
					elem.SetFake()
				}
				s.Body = append(s.Body, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ResponseModificationBodyItem) SetFake() {
	{
		{
			s.Key.SetFake()
		}
	}
	{
		{
			s.Value.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ResponseModificationDetail) SetFake() {
	{
		{
			s.IfStatusCode = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.IfStatusCode = append(s.IfStatusCode, elem)
			}
		}
	}
	{
		{
			s.Headers = nil
			for i := 0; i < 0; i++ {
				var elem ResponseModificationDetailHeadersItem
				{
					elem.SetFake()
				}
				s.Headers = append(s.Headers, elem)
			}
		}
	}
	{
		{
			s.JSON = nil
			for i := 0; i < 0; i++ {
				var elem ResponseModificationDetailJSONItem
				{
					elem.SetFake()
				}
				s.JSON = append(s.JSON, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ResponseModificationDetailHeadersItem) SetFake() {
	{
		{
			s.Key.SetFake()
		}
	}
	{
		{
			s.Value.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ResponseModificationDetailJSONItem) SetFake() {
	{
		{
			s.Key.SetFake()
		}
	}
	{
		{
			s.Value.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ResponseModificationHeadersItem) SetFake() {
	{
		{
			s.Key.SetFake()
		}
	}
	{
		{
			s.Value.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ResponseModificationQueryParamsItem) SetFake() {
	{
		{
			s.Key.SetFake()
		}
	}
	{
		{
			s.Value.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ResponseRemoveDetail) SetFake() {
	{
		{
			s.IfStatusCode = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.IfStatusCode = append(s.IfStatusCode, elem)
			}
		}
	}
	{
		{
			s.HeaderKeys = nil
			for i := 0; i < 0; i++ {
				var elem ResponseHeaderKey
				{
					elem.SetFake()
				}
				s.HeaderKeys = append(s.HeaderKeys, elem)
			}
		}
	}
	{
		{
			s.JsonKeys = nil
			for i := 0; i < 0; i++ {
				var elem JSONKey
				{
					elem.SetFake()
				}
				s.JsonKeys = append(s.JsonKeys, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ResponseRenameDetail) SetFake() {
	{
		{
			s.IfStatusCode = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.IfStatusCode = append(s.IfStatusCode, elem)
			}
		}
	}
	{
		{
			s.Headers = nil
			for i := 0; i < 0; i++ {
				var elem ResponseRenameDetailHeadersItem
				{
					elem.SetFake()
				}
				s.Headers = append(s.Headers, elem)
			}
		}
	}
	{
		{
			s.JSON = nil
			for i := 0; i < 0; i++ {
				var elem ResponseRenameDetailJSONItem
				{
					elem.SetFake()
				}
				s.JSON = append(s.JSON, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ResponseRenameDetailHeadersItem) SetFake() {
	{
		{
			s.From.SetFake()
		}
	}
	{
		{
			s.To.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ResponseRenameDetailJSONItem) SetFake() {
	{
		{
			s.From.SetFake()
		}
	}
	{
		{
			s.To.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ResponseReplaceDetail) SetFake() {
	{
		{
			s.IfStatusCode = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.IfStatusCode = append(s.IfStatusCode, elem)
			}
		}
	}
	{
		{
			s.Headers = nil
			for i := 0; i < 0; i++ {
				var elem ResponseReplaceDetailHeadersItem
				{
					elem.SetFake()
				}
				s.Headers = append(s.Headers, elem)
			}
		}
	}
	{
		{
			s.JSON = nil
			for i := 0; i < 0; i++ {
				var elem ResponseReplaceDetailJSONItem
				{
					elem.SetFake()
				}
				s.JSON = append(s.JSON, elem)
			}
		}
	}
	{
		{
			s.Body.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ResponseReplaceDetailHeadersItem) SetFake() {
	{
		{
			s.Key.SetFake()
		}
	}
	{
		{
			s.Value.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ResponseReplaceDetailJSONItem) SetFake() {
	{
		{
			s.Key.SetFake()
		}
	}
	{
		{
			s.Value.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ResponseTransformation) SetFake() {
	{
		{
			s.Allow.SetFake()
		}
	}
	{
		{
			s.Remove.SetFake()
		}
	}
	{
		{
			s.Rename.SetFake()
		}
	}
	{
		{
			s.Replace.SetFake()
		}
	}
	{
		{
			s.Add.SetFake()
		}
	}
	{
		{
			s.Append.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *RouteAuthorization) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Enabled.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *RouteAuthorizationDetail) SetFake() {
	{
		{
			s.OneOf.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *RouteAuthorizationDetailSum) SetFake() {
	var variant RouteAuthorizationDetailSum0

	{
		variant.SetFake()
	}
	s.SetRouteAuthorizationDetailSum0(variant)
}

// SetFake set fake values.
func (s *RouteAuthorizationDetailSum0) SetFake() {
	{
		{
			s.IsACLEnabled.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *RouteAuthorizationDetailSum0IsACLEnabled) SetFake() {
	*s = RouteAuthorizationDetailSum0IsACLEnabledFalse
}

// SetFake set fake values.
func (s *RouteAuthorizationDetailSum1) SetFake() {
	{
		{
			s.IsACLEnabled.SetFake()
		}
	}
	{
		{
			s.Groups = nil
			for i := 0; i < 1; i++ {
				var elem RouteAuthorization
				{
					elem.SetFake()
				}
				s.Groups = append(s.Groups, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *RouteAuthorizationDetailSum1IsACLEnabled) SetFake() {
	*s = RouteAuthorizationDetailSum1IsACLEnabledTrue
}

// SetFake set fake values.
func (s *RouteDetail) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.ServiceId.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Tags.SetFake()
		}
	}
	{
		{
			s.Protocols.SetFake()
		}
	}
	{
		{
			s.Path.SetFake()
		}
	}
	{
		{
			s.Host.SetFake()
		}
	}
	{
		{
			s.Hosts = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Hosts = append(s.Hosts, elem)
			}
		}
	}
	{
		{
			s.Methods = nil
			for i := 0; i < 1; i++ {
				var elem HTTPMethod
				{
					elem.SetFake()
				}
				s.Methods = append(s.Methods, elem)
			}
		}
	}
	{
		{
			s.HttpsRedirectStatusCode.SetFake()
		}
	}
	{
		{
			s.RegexPriority.SetFake()
		}
	}
	{
		{
			s.StripPath.SetFake()
		}
	}
	{
		{
			s.PreserveHost.SetFake()
		}
	}
	{
		{
			s.RequestBuffering.SetFake()
		}
	}
	{
		{
			s.ResponseBuffering.SetFake()
		}
	}
	{
		{
			s.IpRestrictionConfig = []byte("null")
		}
	}
}

// SetFake set fake values.
func (s *RouteDetailHttpsRedirectStatusCode) SetFake() {
	*s = RouteDetailHttpsRedirectStatusCode301
}

// SetFake set fake values.
func (s *RouteDetailProtocols) SetFake() {
	*s = RouteDetailProtocolsHTTPHTTPS
}

// SetFake set fake values.
func (s *ServiceDetail) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Tags.SetFake()
		}
	}
	{
		{
			s.Protocol.SetFake()
		}
	}
	{
		{
			s.Host = "string"
		}
	}
	{
		{
			s.Path.SetFake()
		}
	}
	{
		{
			s.Port.SetFake()
		}
	}
	{
		{
			s.Retries.SetFake()
		}
	}
	{
		{
			s.ConnectTimeout.SetFake()
		}
	}
	{
		{
			s.WriteTimeout.SetFake()
		}
	}
	{
		{
			s.ReadTimeout.SetFake()
		}
	}
	{
		{
			s.Authentication.SetFake()
		}
	}
	{
		{
			s.Oidc = []byte("null")
		}
	}
	{
		{
			s.RouteHost.SetFake()
		}
	}
	{
		{
			s.CorsConfig = []byte("null")
		}
	}
}

// SetFake set fake values.
func (s *ServiceDetailAuthentication) SetFake() {
	*s = ServiceDetailAuthenticationNone
}

// SetFake set fake values.
func (s *ServiceDetailProtocol) SetFake() {
	*s = ServiceDetailProtocolHTTP
}

// SetFake set fake values.
func (s *SubscribeBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = SubscribeBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *SubscribeInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = SubscribeInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *SubscribeUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = SubscribeUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *Subscribed) SetFake() {
	{
		{
			s.Status.SetFake()
		}
	}
	{
		{
			s.ResourceId.SetFake()
		}
	}
	{
		{
			s.Plan.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SubscribedStatus) SetFake() {
	*s = SubscribedStatusActive
}

// SetFake set fake values.
func (s *SubscriptionOption) SetFake() {
	{
		{
			s.PlanId.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SubscriptionStatus) SetFake() {
	{
		{
			s.OneOf.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SubscriptionStatusSum) SetFake() {
	var variant Unsubscribed

	{
		variant.SetFake()
	}
	s.SetUnsubscribed(variant)
}

// SetFake set fake values.
func (s *Tags) SetFake() {
	var unwrapped []string
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem string
			{
				elem = "string"
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = Tags(unwrapped)
}

// SetFake set fake values.
func (s *UnsubscribeBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UnsubscribeBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *UnsubscribeInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UnsubscribeInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *UnsubscribeNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UnsubscribeNotFound(unwrapped)
}

// SetFake set fake values.
func (s *Unsubscribed) SetFake() {
	{
		{
			s.Status.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *UnsubscribedStatus) SetFake() {
	*s = UnsubscribedStatusUnsubscribed
}

// SetFake set fake values.
func (s *UpdateCertificateBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateCertificateBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *UpdateCertificateConflict) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateCertificateConflict(unwrapped)
}

// SetFake set fake values.
func (s *UpdateCertificateInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateCertificateInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *UpdateCertificateNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateCertificateNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UpdateCertificateUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateCertificateUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UpdateCertificateUnprocessableEntity) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateCertificateUnprocessableEntity(unwrapped)
}

// SetFake set fake values.
func (s *UpdateDomainBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateDomainBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *UpdateDomainConflict) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateDomainConflict(unwrapped)
}

// SetFake set fake values.
func (s *UpdateDomainInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateDomainInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *UpdateDomainNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateDomainNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UpdateDomainUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateDomainUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UpdateGroupBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateGroupBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *UpdateGroupConflict) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateGroupConflict(unwrapped)
}

// SetFake set fake values.
func (s *UpdateGroupInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateGroupInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *UpdateGroupNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateGroupNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UpdateGroupUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateGroupUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UpdateOidcBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateOidcBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *UpdateOidcConflict) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateOidcConflict(unwrapped)
}

// SetFake set fake values.
func (s *UpdateOidcInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateOidcInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *UpdateOidcNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateOidcNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UpdateOidcUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateOidcUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UpdateRouteBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateRouteBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *UpdateRouteConflict) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateRouteConflict(unwrapped)
}

// SetFake set fake values.
func (s *UpdateRouteInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateRouteInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *UpdateRouteNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateRouteNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UpdateRouteUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateRouteUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UpdateServiceBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateServiceBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *UpdateServiceConflict) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateServiceConflict(unwrapped)
}

// SetFake set fake values.
func (s *UpdateServiceInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateServiceInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *UpdateServiceNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateServiceNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UpdateServiceUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateServiceUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UpdateSubscriptionBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateSubscriptionBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *UpdateSubscriptionInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateSubscriptionInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *UpdateSubscriptionUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateSubscriptionUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UpdateUserBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateUserBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *UpdateUserConflict) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateUserConflict(unwrapped)
}

// SetFake set fake values.
func (s *UpdateUserGroupBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateUserGroupBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *UpdateUserGroupInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateUserGroupInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *UpdateUserGroupNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateUserGroupNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UpdateUserGroupUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateUserGroupUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UpdateUserInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateUserInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *UpdateUserNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateUserNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UpdateUserUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpdateUserUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UpsertRequestTransformationBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpsertRequestTransformationBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *UpsertRequestTransformationInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpsertRequestTransformationInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *UpsertRequestTransformationNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpsertRequestTransformationNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UpsertResponseTransformationBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpsertResponseTransformationBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *UpsertResponseTransformationInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpsertResponseTransformationInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *UpsertResponseTransformationNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpsertResponseTransformationNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UpsertResponseTransformationUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpsertResponseTransformationUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UpsertRouteAuthorizationBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpsertRouteAuthorizationBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *UpsertRouteAuthorizationInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpsertRouteAuthorizationInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *UpsertRouteAuthorizationNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpsertRouteAuthorizationNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UpsertRouteAuthorizationUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpsertRouteAuthorizationUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UpsertUserAuthenticationBadRequest) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpsertUserAuthenticationBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *UpsertUserAuthenticationInternalServerError) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpsertUserAuthenticationInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *UpsertUserAuthenticationNotFound) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpsertUserAuthenticationNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UpsertUserAuthenticationUnauthorized) SetFake() {
	var unwrapped ErrorSchema
	{
		unwrapped.SetFake()
	}
	*s = UpsertUserAuthenticationUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *User) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.CustomID.SetFake()
		}
	}
	{
		{
			s.Groups = nil
			for i := 0; i < 0; i++ {
				var elem Group
				{
					elem.SetFake()
				}
				s.Groups = append(s.Groups, elem)
			}
		}
	}
	{
		{
			s.Tags.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *UserAuthentication) SetFake() {
	{
		{
			s.BasicAuth.SetFake()
		}
	}
	{
		{
			s.Jwt.SetFake()
		}
	}
	{
		{
			s.HmacAuth.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *UserDetail) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.CustomID.SetFake()
		}
	}
	{
		{
			s.Groups = nil
			for i := 0; i < 0; i++ {
				var elem Group
				{
					elem.SetFake()
				}
				s.Groups = append(s.Groups, elem)
			}
		}
	}
	{
		{
			s.Tags.SetFake()
		}
	}
	{
		{
			s.IpRestrictionConfig = []byte("null")
		}
	}
}

// SetFake set fake values.
func (s *UserGroupDetail) SetFake() {
	{
		{
			s.ID = uuid.New()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.IsAssigned = true
		}
	}
}
