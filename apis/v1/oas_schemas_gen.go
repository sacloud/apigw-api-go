// Code generated by ogen, DO NOT EDIT.

package v1

import (
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
)

type AddCertificateBadRequest ErrorSchema

func (*AddCertificateBadRequest) addCertificateRes() {}

type AddCertificateConflict ErrorSchema

func (*AddCertificateConflict) addCertificateRes() {}

type AddCertificateCreated struct {
	Apigw AddCertificateCreatedApigw `json:"apigw"`
}

// GetApigw returns the value of Apigw.
func (s *AddCertificateCreated) GetApigw() AddCertificateCreatedApigw {
	return s.Apigw
}

// SetApigw sets the value of Apigw.
func (s *AddCertificateCreated) SetApigw(val AddCertificateCreatedApigw) {
	s.Apigw = val
}

func (*AddCertificateCreated) addCertificateRes() {}

type AddCertificateCreatedApigw struct {
	Certificate OptCertificate `json:"certificate"`
}

// GetCertificate returns the value of Certificate.
func (s *AddCertificateCreatedApigw) GetCertificate() OptCertificate {
	return s.Certificate
}

// SetCertificate sets the value of Certificate.
func (s *AddCertificateCreatedApigw) SetCertificate(val OptCertificate) {
	s.Certificate = val
}

type AddCertificateInternalServerError ErrorSchema

func (*AddCertificateInternalServerError) addCertificateRes() {}

type AddCertificateUnauthorized ErrorSchema

func (*AddCertificateUnauthorized) addCertificateRes() {}

type AddCertificateUnprocessableEntity ErrorSchema

func (*AddCertificateUnprocessableEntity) addCertificateRes() {}

type AddDomainBadRequest ErrorSchema

func (*AddDomainBadRequest) addDomainRes() {}

type AddDomainConflict ErrorSchema

func (*AddDomainConflict) addDomainRes() {}

type AddDomainCreated struct {
	Apigw AddDomainCreatedApigw `json:"apigw"`
}

// GetApigw returns the value of Apigw.
func (s *AddDomainCreated) GetApigw() AddDomainCreatedApigw {
	return s.Apigw
}

// SetApigw sets the value of Apigw.
func (s *AddDomainCreated) SetApigw(val AddDomainCreatedApigw) {
	s.Apigw = val
}

func (*AddDomainCreated) addDomainRes() {}

type AddDomainCreatedApigw struct {
	Domain OptDomain `json:"domain"`
}

// GetDomain returns the value of Domain.
func (s *AddDomainCreatedApigw) GetDomain() OptDomain {
	return s.Domain
}

// SetDomain sets the value of Domain.
func (s *AddDomainCreatedApigw) SetDomain(val OptDomain) {
	s.Domain = val
}

type AddDomainInternalServerError ErrorSchema

func (*AddDomainInternalServerError) addDomainRes() {}

type AddDomainUnauthorized ErrorSchema

func (*AddDomainUnauthorized) addDomainRes() {}

type AddGroupBadRequest ErrorSchema

func (*AddGroupBadRequest) addGroupRes() {}

type AddGroupConflict ErrorSchema

func (*AddGroupConflict) addGroupRes() {}

type AddGroupCreated struct {
	Apigw AddGroupCreatedApigw `json:"apigw"`
}

// GetApigw returns the value of Apigw.
func (s *AddGroupCreated) GetApigw() AddGroupCreatedApigw {
	return s.Apigw
}

// SetApigw sets the value of Apigw.
func (s *AddGroupCreated) SetApigw(val AddGroupCreatedApigw) {
	s.Apigw = val
}

func (*AddGroupCreated) addGroupRes() {}

type AddGroupCreatedApigw struct {
	Group OptGroup `json:"group"`
}

// GetGroup returns the value of Group.
func (s *AddGroupCreatedApigw) GetGroup() OptGroup {
	return s.Group
}

// SetGroup sets the value of Group.
func (s *AddGroupCreatedApigw) SetGroup(val OptGroup) {
	s.Group = val
}

type AddGroupInternalServerError ErrorSchema

func (*AddGroupInternalServerError) addGroupRes() {}

type AddGroupUnauthorized ErrorSchema

func (*AddGroupUnauthorized) addGroupRes() {}

type AddOidcBadRequest ErrorSchema

func (*AddOidcBadRequest) addOidcRes() {}

type AddOidcConflict ErrorSchema

func (*AddOidcConflict) addOidcRes() {}

type AddOidcCreated struct {
	Apigw AddOidcCreatedApigw `json:"apigw"`
}

// GetApigw returns the value of Apigw.
func (s *AddOidcCreated) GetApigw() AddOidcCreatedApigw {
	return s.Apigw
}

// SetApigw sets the value of Apigw.
func (s *AddOidcCreated) SetApigw(val AddOidcCreatedApigw) {
	s.Apigw = val
}

func (*AddOidcCreated) addOidcRes() {}

type AddOidcCreatedApigw struct {
	Oidc OptOidc `json:"oidc"`
}

// GetOidc returns the value of Oidc.
func (s *AddOidcCreatedApigw) GetOidc() OptOidc {
	return s.Oidc
}

// SetOidc sets the value of Oidc.
func (s *AddOidcCreatedApigw) SetOidc(val OptOidc) {
	s.Oidc = val
}

type AddOidcInternalServerError ErrorSchema

func (*AddOidcInternalServerError) addOidcRes() {}

type AddOidcNotFound ErrorSchema

func (*AddOidcNotFound) addOidcRes() {}

type AddOidcUnauthorized ErrorSchema

func (*AddOidcUnauthorized) addOidcRes() {}

type AddOidcUnprocessableEntity ErrorSchema

func (*AddOidcUnprocessableEntity) addOidcRes() {}

type AddRouteBadRequest ErrorSchema

func (*AddRouteBadRequest) addRouteRes() {}

type AddRouteConflict ErrorSchema

func (*AddRouteConflict) addRouteRes() {}

type AddRouteCreated struct {
	Apigw jx.Raw `json:"apigw"`
}

// GetApigw returns the value of Apigw.
func (s *AddRouteCreated) GetApigw() jx.Raw {
	return s.Apigw
}

// SetApigw sets the value of Apigw.
func (s *AddRouteCreated) SetApigw(val jx.Raw) {
	s.Apigw = val
}

func (*AddRouteCreated) addRouteRes() {}

type AddRouteInternalServerError ErrorSchema

func (*AddRouteInternalServerError) addRouteRes() {}

type AddRouteNotFound ErrorSchema

func (*AddRouteNotFound) addRouteRes() {}

type AddRouteUnauthorized ErrorSchema

func (*AddRouteUnauthorized) addRouteRes() {}

type AddServiceBadRequest ErrorSchema

func (*AddServiceBadRequest) addServiceRes() {}

type AddServiceConflict ErrorSchema

func (*AddServiceConflict) addServiceRes() {}

type AddServiceInternalServerError ErrorSchema

func (*AddServiceInternalServerError) addServiceRes() {}

type AddServiceNotFound ErrorSchema

func (*AddServiceNotFound) addServiceRes() {}

type AddServiceOK struct {
	Apigw AddServiceOKApigw `json:"apigw"`
}

// GetApigw returns the value of Apigw.
func (s *AddServiceOK) GetApigw() AddServiceOKApigw {
	return s.Apigw
}

// SetApigw sets the value of Apigw.
func (s *AddServiceOK) SetApigw(val AddServiceOKApigw) {
	s.Apigw = val
}

func (*AddServiceOK) addServiceRes() {}

type AddServiceOKApigw struct {
	Service OptServiceDetail `json:"service"`
}

// GetService returns the value of Service.
func (s *AddServiceOKApigw) GetService() OptServiceDetail {
	return s.Service
}

// SetService sets the value of Service.
func (s *AddServiceOKApigw) SetService(val OptServiceDetail) {
	s.Service = val
}

type AddServiceUnauthorized ErrorSchema

func (*AddServiceUnauthorized) addServiceRes() {}

type AddServiceUnprocessableEntity ErrorSchema

func (*AddServiceUnprocessableEntity) addServiceRes() {}

type AddUserBadRequest ErrorSchema

func (*AddUserBadRequest) addUserRes() {}

type AddUserConflict ErrorSchema

func (*AddUserConflict) addUserRes() {}

type AddUserCreated struct {
	Apigw AddUserCreatedApigw `json:"apigw"`
}

// GetApigw returns the value of Apigw.
func (s *AddUserCreated) GetApigw() AddUserCreatedApigw {
	return s.Apigw
}

// SetApigw sets the value of Apigw.
func (s *AddUserCreated) SetApigw(val AddUserCreatedApigw) {
	s.Apigw = val
}

func (*AddUserCreated) addUserRes() {}

type AddUserCreatedApigw struct {
	User OptUserDetail `json:"user"`
}

// GetUser returns the value of User.
func (s *AddUserCreatedApigw) GetUser() OptUserDetail {
	return s.User
}

// SetUser sets the value of User.
func (s *AddUserCreatedApigw) SetUser(val OptUserDetail) {
	s.User = val
}

type AddUserInternalServerError ErrorSchema

func (*AddUserInternalServerError) addUserRes() {}

type AuthenticationMethods []AuthenticationMethodsItem

type AuthenticationMethodsItem string

const (
	AuthenticationMethodsItemAuthorizationCodeFlow AuthenticationMethodsItem = "authorizationCodeFlow"
	AuthenticationMethodsItemAccessToken           AuthenticationMethodsItem = "accessToken"
	AuthenticationMethodsItemRefreshToken          AuthenticationMethodsItem = "refreshToken"
)

// AllValues returns all AuthenticationMethodsItem values.
func (AuthenticationMethodsItem) AllValues() []AuthenticationMethodsItem {
	return []AuthenticationMethodsItem{
		AuthenticationMethodsItemAuthorizationCodeFlow,
		AuthenticationMethodsItemAccessToken,
		AuthenticationMethodsItemRefreshToken,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AuthenticationMethodsItem) MarshalText() ([]byte, error) {
	switch s {
	case AuthenticationMethodsItemAuthorizationCodeFlow:
		return []byte(s), nil
	case AuthenticationMethodsItemAccessToken:
		return []byte(s), nil
	case AuthenticationMethodsItemRefreshToken:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AuthenticationMethodsItem) UnmarshalText(data []byte) error {
	switch AuthenticationMethodsItem(data) {
	case AuthenticationMethodsItemAuthorizationCodeFlow:
		*s = AuthenticationMethodsItemAuthorizationCodeFlow
		return nil
	case AuthenticationMethodsItemAccessToken:
		*s = AuthenticationMethodsItemAccessToken
		return nil
	case AuthenticationMethodsItemRefreshToken:
		*s = AuthenticationMethodsItemRefreshToken
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/BasicAuth
type BasicAuth struct {
	// Entityを識別するためのID.
	ID OptUUID `json:"id"`
	// 作成日時.
	CreatedAt OptDateTime `json:"createdAt"`
	// 更新日時.
	UpdatedAt OptDateTime `json:"updatedAt"`
	// ユーザ名.
	UserName string `json:"userName"`
	// パスワード.
	Password string `json:"password"`
}

// GetID returns the value of ID.
func (s *BasicAuth) GetID() OptUUID {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *BasicAuth) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *BasicAuth) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetUserName returns the value of UserName.
func (s *BasicAuth) GetUserName() string {
	return s.UserName
}

// GetPassword returns the value of Password.
func (s *BasicAuth) GetPassword() string {
	return s.Password
}

// SetID sets the value of ID.
func (s *BasicAuth) SetID(val OptUUID) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *BasicAuth) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *BasicAuth) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetUserName sets the value of UserName.
func (s *BasicAuth) SetUserName(val string) {
	s.UserName = val
}

// SetPassword sets the value of Password.
func (s *BasicAuth) SetPassword(val string) {
	s.Password = val
}

// Merged schema.
// Ref: #/components/schemas/Certificate
type Certificate struct {
	// Entityを識別するためのID.
	ID OptUUID `json:"id"`
	// 作成日時.
	CreatedAt OptDateTime `json:"createdAt"`
	// 更新日時.
	UpdatedAt OptDateTime `json:"updatedAt"`
	// 証明書の識別名<br>証明書名はUnicode文字、数字、ハイフン、アンダースコア、ピリオドのみ許可.
	Name OptName `json:"name"`
	// RSA証明書情報.
	Rsa OptCertificateDetails `json:"rsa"`
	// ECDSA証明書情報.
	Ecdsa OptCertificateDetails `json:"ecdsa"`
}

// GetID returns the value of ID.
func (s *Certificate) GetID() OptUUID {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Certificate) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Certificate) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *Certificate) GetName() OptName {
	return s.Name
}

// GetRsa returns the value of Rsa.
func (s *Certificate) GetRsa() OptCertificateDetails {
	return s.Rsa
}

// GetEcdsa returns the value of Ecdsa.
func (s *Certificate) GetEcdsa() OptCertificateDetails {
	return s.Ecdsa
}

// SetID sets the value of ID.
func (s *Certificate) SetID(val OptUUID) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Certificate) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Certificate) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *Certificate) SetName(val OptName) {
	s.Name = val
}

// SetRsa sets the value of Rsa.
func (s *Certificate) SetRsa(val OptCertificateDetails) {
	s.Rsa = val
}

// SetEcdsa sets the value of Ecdsa.
func (s *Certificate) SetEcdsa(val OptCertificateDetails) {
	s.Ecdsa = val
}

// Ref: #/components/schemas/CertificateDetails
type CertificateDetails struct {
	// 証明書<br>改行コード（\n）はエスケープ文字に変換して指定する.
	Cert OptString `json:"cert"`
	// 秘密鍵<br>改行コード（\n）はエスケープ文字に変換して指定する.
	Key OptString `json:"key"`
	// 証明書の有効期限.
	ExpiredAt OptDateTime `json:"expiredAt"`
}

// GetCert returns the value of Cert.
func (s *CertificateDetails) GetCert() OptString {
	return s.Cert
}

// GetKey returns the value of Key.
func (s *CertificateDetails) GetKey() OptString {
	return s.Key
}

// GetExpiredAt returns the value of ExpiredAt.
func (s *CertificateDetails) GetExpiredAt() OptDateTime {
	return s.ExpiredAt
}

// SetCert sets the value of Cert.
func (s *CertificateDetails) SetCert(val OptString) {
	s.Cert = val
}

// SetKey sets the value of Key.
func (s *CertificateDetails) SetKey(val OptString) {
	s.Key = val
}

// SetExpiredAt sets the value of ExpiredAt.
func (s *CertificateDetails) SetExpiredAt(val OptDateTime) {
	s.ExpiredAt = val
}

type DeleteCertificateBadRequest ErrorSchema

func (*DeleteCertificateBadRequest) deleteCertificateRes() {}

type DeleteCertificateInternalServerError ErrorSchema

func (*DeleteCertificateInternalServerError) deleteCertificateRes() {}

// DeleteCertificateNoContent is response for DeleteCertificate operation.
type DeleteCertificateNoContent struct{}

func (*DeleteCertificateNoContent) deleteCertificateRes() {}

type DeleteCertificateNotFound ErrorSchema

func (*DeleteCertificateNotFound) deleteCertificateRes() {}

type DeleteCertificateUnauthorized ErrorSchema

func (*DeleteCertificateUnauthorized) deleteCertificateRes() {}

type DeleteDomainBadRequest ErrorSchema

func (*DeleteDomainBadRequest) deleteDomainRes() {}

type DeleteDomainInternalServerError ErrorSchema

func (*DeleteDomainInternalServerError) deleteDomainRes() {}

// DeleteDomainNoContent is response for DeleteDomain operation.
type DeleteDomainNoContent struct{}

func (*DeleteDomainNoContent) deleteDomainRes() {}

type DeleteDomainNotFound ErrorSchema

func (*DeleteDomainNotFound) deleteDomainRes() {}

type DeleteDomainUnauthorized ErrorSchema

func (*DeleteDomainUnauthorized) deleteDomainRes() {}

type DeleteGroupBadRequest ErrorSchema

func (*DeleteGroupBadRequest) deleteGroupRes() {}

type DeleteGroupInternalServerError ErrorSchema

func (*DeleteGroupInternalServerError) deleteGroupRes() {}

// DeleteGroupNoContent is response for DeleteGroup operation.
type DeleteGroupNoContent struct{}

func (*DeleteGroupNoContent) deleteGroupRes() {}

type DeleteGroupNotFound ErrorSchema

func (*DeleteGroupNotFound) deleteGroupRes() {}

type DeleteGroupUnauthorized ErrorSchema

func (*DeleteGroupUnauthorized) deleteGroupRes() {}

type DeleteOidcBadRequest ErrorSchema

func (*DeleteOidcBadRequest) deleteOidcRes() {}

type DeleteOidcConflict ErrorSchema

func (*DeleteOidcConflict) deleteOidcRes() {}

type DeleteOidcInternalServerError ErrorSchema

func (*DeleteOidcInternalServerError) deleteOidcRes() {}

// DeleteOidcNoContent is response for DeleteOidc operation.
type DeleteOidcNoContent struct{}

func (*DeleteOidcNoContent) deleteOidcRes() {}

type DeleteOidcNotFound ErrorSchema

func (*DeleteOidcNotFound) deleteOidcRes() {}

type DeleteOidcUnauthorized ErrorSchema

func (*DeleteOidcUnauthorized) deleteOidcRes() {}

type DeleteRouteBadRequest ErrorSchema

func (*DeleteRouteBadRequest) deleteRouteRes() {}

type DeleteRouteInternalServerError ErrorSchema

func (*DeleteRouteInternalServerError) deleteRouteRes() {}

// DeleteRouteNoContent is response for DeleteRoute operation.
type DeleteRouteNoContent struct{}

func (*DeleteRouteNoContent) deleteRouteRes() {}

type DeleteRouteNotFound ErrorSchema

func (*DeleteRouteNotFound) deleteRouteRes() {}

type DeleteRouteUnauthorized ErrorSchema

func (*DeleteRouteUnauthorized) deleteRouteRes() {}

type DeleteServiceBadRequest ErrorSchema

func (*DeleteServiceBadRequest) deleteServiceRes() {}

type DeleteServiceInternalServerError ErrorSchema

func (*DeleteServiceInternalServerError) deleteServiceRes() {}

// DeleteServiceNoContent is response for DeleteService operation.
type DeleteServiceNoContent struct{}

func (*DeleteServiceNoContent) deleteServiceRes() {}

type DeleteServiceNotFound ErrorSchema

func (*DeleteServiceNotFound) deleteServiceRes() {}

type DeleteServiceUnauthorized ErrorSchema

func (*DeleteServiceUnauthorized) deleteServiceRes() {}

type DeleteUserBadRequest ErrorSchema

func (*DeleteUserBadRequest) deleteUserRes() {}

type DeleteUserInternalServerError ErrorSchema

func (*DeleteUserInternalServerError) deleteUserRes() {}

// DeleteUserNoContent is response for DeleteUser operation.
type DeleteUserNoContent struct{}

func (*DeleteUserNoContent) deleteUserRes() {}

type DeleteUserNotFound ErrorSchema

func (*DeleteUserNotFound) deleteUserRes() {}

// Merged schema.
// Ref: #/components/schemas/Domain
type Domain struct {
	// Entityを識別するためのID.
	ID OptUUID `json:"id"`
	// 作成日時.
	CreatedAt OptDateTime `json:"createdAt"`
	// 更新日時.
	UpdatedAt OptDateTime `json:"updatedAt"`
	// ドメイン名<br>ドメイン名はドメイン名形式を指定する<br>IPv4アドレス及びワイルドカード（*）を指定できない<br>大文字を含めることはできない.
	DomainName string `json:"domainName"`
	// 証明書のID.
	CertificateId OptUUID `json:"certificateId"`
	// 証明書の識別名.
	CertificateName OptString `json:"certificateName"`
}

// GetID returns the value of ID.
func (s *Domain) GetID() OptUUID {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Domain) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Domain) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetDomainName returns the value of DomainName.
func (s *Domain) GetDomainName() string {
	return s.DomainName
}

// GetCertificateId returns the value of CertificateId.
func (s *Domain) GetCertificateId() OptUUID {
	return s.CertificateId
}

// GetCertificateName returns the value of CertificateName.
func (s *Domain) GetCertificateName() OptString {
	return s.CertificateName
}

// SetID sets the value of ID.
func (s *Domain) SetID(val OptUUID) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Domain) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Domain) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetDomainName sets the value of DomainName.
func (s *Domain) SetDomainName(val string) {
	s.DomainName = val
}

// SetCertificateId sets the value of CertificateId.
func (s *Domain) SetCertificateId(val OptUUID) {
	s.CertificateId = val
}

// SetCertificateName sets the value of CertificateName.
func (s *Domain) SetCertificateName(val OptString) {
	s.CertificateName = val
}

// Ref: #/components/schemas/DomainPUT
type DomainPUT struct {
	// 証明書のID.
	CertificateId OptUUID `json:"certificateId"`
}

// GetCertificateId returns the value of CertificateId.
func (s *DomainPUT) GetCertificateId() OptUUID {
	return s.CertificateId
}

// SetCertificateId sets the value of CertificateId.
func (s *DomainPUT) SetCertificateId(val OptUUID) {
	s.CertificateId = val
}

// Ref: #/components/schemas/ErrorSchema
type ErrorSchema struct {
	// 各エラーに対応したメッセージが返却される.
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorSchema) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorSchema) SetMessage(val OptString) {
	s.Message = val
}

func (*ErrorSchema) getPlansRes() {}

type GetCertificatesBadRequest ErrorSchema

func (*GetCertificatesBadRequest) getCertificatesRes() {}

type GetCertificatesInternalServerError ErrorSchema

func (*GetCertificatesInternalServerError) getCertificatesRes() {}

type GetCertificatesOK struct {
	Apigw jx.Raw `json:"apigw"`
}

// GetApigw returns the value of Apigw.
func (s *GetCertificatesOK) GetApigw() jx.Raw {
	return s.Apigw
}

// SetApigw sets the value of Apigw.
func (s *GetCertificatesOK) SetApigw(val jx.Raw) {
	s.Apigw = val
}

func (*GetCertificatesOK) getCertificatesRes() {}

type GetCertificatesUnauthorized ErrorSchema

func (*GetCertificatesUnauthorized) getCertificatesRes() {}

type GetDomainsBadRequest ErrorSchema

func (*GetDomainsBadRequest) getDomainsRes() {}

type GetDomainsInternalServerError ErrorSchema

func (*GetDomainsInternalServerError) getDomainsRes() {}

type GetDomainsOK struct {
	Apigw jx.Raw `json:"apigw"`
}

// GetApigw returns the value of Apigw.
func (s *GetDomainsOK) GetApigw() jx.Raw {
	return s.Apigw
}

// SetApigw sets the value of Apigw.
func (s *GetDomainsOK) SetApigw(val jx.Raw) {
	s.Apigw = val
}

func (*GetDomainsOK) getDomainsRes() {}

type GetDomainsUnauthorized ErrorSchema

func (*GetDomainsUnauthorized) getDomainsRes() {}

type GetGroupBadRequest ErrorSchema

func (*GetGroupBadRequest) getGroupRes() {}

type GetGroupInternalServerError ErrorSchema

func (*GetGroupInternalServerError) getGroupRes() {}

type GetGroupNotFound ErrorSchema

func (*GetGroupNotFound) getGroupRes() {}

type GetGroupOK struct {
	Apigw GetGroupOKApigw `json:"apigw"`
}

// GetApigw returns the value of Apigw.
func (s *GetGroupOK) GetApigw() GetGroupOKApigw {
	return s.Apigw
}

// SetApigw sets the value of Apigw.
func (s *GetGroupOK) SetApigw(val GetGroupOKApigw) {
	s.Apigw = val
}

func (*GetGroupOK) getGroupRes() {}

type GetGroupOKApigw struct {
	Group OptGroup `json:"group"`
}

// GetGroup returns the value of Group.
func (s *GetGroupOKApigw) GetGroup() OptGroup {
	return s.Group
}

// SetGroup sets the value of Group.
func (s *GetGroupOKApigw) SetGroup(val OptGroup) {
	s.Group = val
}

type GetGroupsBadRequest ErrorSchema

func (*GetGroupsBadRequest) getGroupsRes() {}

type GetGroupsInternalServerError ErrorSchema

func (*GetGroupsInternalServerError) getGroupsRes() {}

type GetGroupsOK struct {
	Apigw jx.Raw `json:"apigw"`
}

// GetApigw returns the value of Apigw.
func (s *GetGroupsOK) GetApigw() jx.Raw {
	return s.Apigw
}

// SetApigw sets the value of Apigw.
func (s *GetGroupsOK) SetApigw(val jx.Raw) {
	s.Apigw = val
}

func (*GetGroupsOK) getGroupsRes() {}

type GetGroupsUnauthorized ErrorSchema

func (*GetGroupsUnauthorized) getGroupsRes() {}

type GetOidcBadRequest ErrorSchema

func (*GetOidcBadRequest) getOidcRes() {}

type GetOidcByIdBadRequest ErrorSchema

func (*GetOidcByIdBadRequest) getOidcByIdRes() {}

type GetOidcByIdInternalServerError ErrorSchema

func (*GetOidcByIdInternalServerError) getOidcByIdRes() {}

type GetOidcByIdNotFound ErrorSchema

func (*GetOidcByIdNotFound) getOidcByIdRes() {}

type GetOidcByIdOKApplicationJSON jx.Raw

func (*GetOidcByIdOKApplicationJSON) getOidcByIdRes() {}

type GetOidcByIdUnauthorized ErrorSchema

func (*GetOidcByIdUnauthorized) getOidcByIdRes() {}

type GetOidcInternalServerError ErrorSchema

func (*GetOidcInternalServerError) getOidcRes() {}

type GetOidcNotFound ErrorSchema

func (*GetOidcNotFound) getOidcRes() {}

type GetOidcOKApplicationJSON jx.Raw

func (*GetOidcOKApplicationJSON) getOidcRes() {}

type GetOidcUnauthorized ErrorSchema

func (*GetOidcUnauthorized) getOidcRes() {}

type GetPlansOK struct {
	Apigw jx.Raw `json:"apigw"`
}

// GetApigw returns the value of Apigw.
func (s *GetPlansOK) GetApigw() jx.Raw {
	return s.Apigw
}

// SetApigw sets the value of Apigw.
func (s *GetPlansOK) SetApigw(val jx.Raw) {
	s.Apigw = val
}

func (*GetPlansOK) getPlansRes() {}

type GetRequestTransformationBadRequest ErrorSchema

func (*GetRequestTransformationBadRequest) getRequestTransformationRes() {}

type GetRequestTransformationInternalServerError ErrorSchema

func (*GetRequestTransformationInternalServerError) getRequestTransformationRes() {}

type GetRequestTransformationNotFound ErrorSchema

func (*GetRequestTransformationNotFound) getRequestTransformationRes() {}

type GetRequestTransformationOKApplicationJSON jx.Raw

func (*GetRequestTransformationOKApplicationJSON) getRequestTransformationRes() {}

type GetRequestTransformationUnauthorized ErrorSchema

func (*GetRequestTransformationUnauthorized) getRequestTransformationRes() {}

type GetResponseTransformationBadRequest ErrorSchema

func (*GetResponseTransformationBadRequest) getResponseTransformationRes() {}

type GetResponseTransformationInternalServerError ErrorSchema

func (*GetResponseTransformationInternalServerError) getResponseTransformationRes() {}

type GetResponseTransformationNotFound ErrorSchema

func (*GetResponseTransformationNotFound) getResponseTransformationRes() {}

type GetResponseTransformationOKApplicationJSON jx.Raw

func (*GetResponseTransformationOKApplicationJSON) getResponseTransformationRes() {}

type GetResponseTransformationUnauthorized ErrorSchema

func (*GetResponseTransformationUnauthorized) getResponseTransformationRes() {}

type GetRouteAuthorizationBadRequest ErrorSchema

func (*GetRouteAuthorizationBadRequest) getRouteAuthorizationRes() {}

type GetRouteAuthorizationInternalServerError ErrorSchema

func (*GetRouteAuthorizationInternalServerError) getRouteAuthorizationRes() {}

type GetRouteAuthorizationNotFound ErrorSchema

func (*GetRouteAuthorizationNotFound) getRouteAuthorizationRes() {}

type GetRouteAuthorizationOKApplicationJSON jx.Raw

func (*GetRouteAuthorizationOKApplicationJSON) getRouteAuthorizationRes() {}

type GetRouteAuthorizationUnauthorized ErrorSchema

func (*GetRouteAuthorizationUnauthorized) getRouteAuthorizationRes() {}

type GetRouteBadRequest ErrorSchema

func (*GetRouteBadRequest) getRouteRes() {}

type GetRouteInternalServerError ErrorSchema

func (*GetRouteInternalServerError) getRouteRes() {}

type GetRouteNotFound ErrorSchema

func (*GetRouteNotFound) getRouteRes() {}

type GetRouteOKApplicationJSON jx.Raw

func (*GetRouteOKApplicationJSON) getRouteRes() {}

type GetRouteUnauthorized ErrorSchema

func (*GetRouteUnauthorized) getRouteRes() {}

type GetServiceByIdBadRequest ErrorSchema

func (*GetServiceByIdBadRequest) getServiceByIdRes() {}

type GetServiceByIdInternalServerError ErrorSchema

func (*GetServiceByIdInternalServerError) getServiceByIdRes() {}

type GetServiceByIdNotFound ErrorSchema

func (*GetServiceByIdNotFound) getServiceByIdRes() {}

type GetServiceByIdOK struct {
	Apigw GetServiceByIdOKApigw `json:"apigw"`
}

// GetApigw returns the value of Apigw.
func (s *GetServiceByIdOK) GetApigw() GetServiceByIdOKApigw {
	return s.Apigw
}

// SetApigw sets the value of Apigw.
func (s *GetServiceByIdOK) SetApigw(val GetServiceByIdOKApigw) {
	s.Apigw = val
}

func (*GetServiceByIdOK) getServiceByIdRes() {}

type GetServiceByIdOKApigw struct {
	Service OptServiceDetail `json:"service"`
}

// GetService returns the value of Service.
func (s *GetServiceByIdOKApigw) GetService() OptServiceDetail {
	return s.Service
}

// SetService sets the value of Service.
func (s *GetServiceByIdOKApigw) SetService(val OptServiceDetail) {
	s.Service = val
}

type GetServiceRoutesBadRequest ErrorSchema

func (*GetServiceRoutesBadRequest) getServiceRoutesRes() {}

type GetServiceRoutesInternalServerError ErrorSchema

func (*GetServiceRoutesInternalServerError) getServiceRoutesRes() {}

type GetServiceRoutesNotFound ErrorSchema

func (*GetServiceRoutesNotFound) getServiceRoutesRes() {}

type GetServiceRoutesOK struct {
	Apigw jx.Raw `json:"apigw"`
}

// GetApigw returns the value of Apigw.
func (s *GetServiceRoutesOK) GetApigw() jx.Raw {
	return s.Apigw
}

// SetApigw sets the value of Apigw.
func (s *GetServiceRoutesOK) SetApigw(val jx.Raw) {
	s.Apigw = val
}

func (*GetServiceRoutesOK) getServiceRoutesRes() {}

type GetServiceRoutesUnauthorized ErrorSchema

func (*GetServiceRoutesUnauthorized) getServiceRoutesRes() {}

type GetServicesBadRequest ErrorSchema

func (*GetServicesBadRequest) getServicesRes() {}

type GetServicesInternalServerError ErrorSchema

func (*GetServicesInternalServerError) getServicesRes() {}

type GetServicesOK struct {
	Apigw jx.Raw `json:"apigw"`
}

// GetApigw returns the value of Apigw.
func (s *GetServicesOK) GetApigw() jx.Raw {
	return s.Apigw
}

// SetApigw sets the value of Apigw.
func (s *GetServicesOK) SetApigw(val jx.Raw) {
	s.Apigw = val
}

func (*GetServicesOK) getServicesRes() {}

type GetServicesUnauthorized ErrorSchema

func (*GetServicesUnauthorized) getServicesRes() {}

type GetSubscriptionInternalServerError ErrorSchema

func (*GetSubscriptionInternalServerError) getSubscriptionRes() {}

type GetSubscriptionOK struct {
	Apigw GetSubscriptionOKApigw `json:"apigw"`
}

// GetApigw returns the value of Apigw.
func (s *GetSubscriptionOK) GetApigw() GetSubscriptionOKApigw {
	return s.Apigw
}

// SetApigw sets the value of Apigw.
func (s *GetSubscriptionOK) SetApigw(val GetSubscriptionOKApigw) {
	s.Apigw = val
}

func (*GetSubscriptionOK) getSubscriptionRes() {}

type GetSubscriptionOKApigw struct {
	Subscription OptSubscriptionStatus `json:"subscription"`
}

// GetSubscription returns the value of Subscription.
func (s *GetSubscriptionOKApigw) GetSubscription() OptSubscriptionStatus {
	return s.Subscription
}

// SetSubscription sets the value of Subscription.
func (s *GetSubscriptionOKApigw) SetSubscription(val OptSubscriptionStatus) {
	s.Subscription = val
}

type GetSubscriptionUnauthorized ErrorSchema

func (*GetSubscriptionUnauthorized) getSubscriptionRes() {}

type GetUserAuthenticationBadRequest ErrorSchema

func (*GetUserAuthenticationBadRequest) getUserAuthenticationRes() {}

type GetUserAuthenticationInternalServerError ErrorSchema

func (*GetUserAuthenticationInternalServerError) getUserAuthenticationRes() {}

type GetUserAuthenticationNotFound ErrorSchema

func (*GetUserAuthenticationNotFound) getUserAuthenticationRes() {}

type GetUserAuthenticationOK struct {
	Apigw GetUserAuthenticationOKApigw `json:"apigw"`
}

// GetApigw returns the value of Apigw.
func (s *GetUserAuthenticationOK) GetApigw() GetUserAuthenticationOKApigw {
	return s.Apigw
}

// SetApigw sets the value of Apigw.
func (s *GetUserAuthenticationOK) SetApigw(val GetUserAuthenticationOKApigw) {
	s.Apigw = val
}

func (*GetUserAuthenticationOK) getUserAuthenticationRes() {}

type GetUserAuthenticationOKApigw struct {
	UserAuthentication OptUserAuthentication `json:"userAuthentication"`
}

// GetUserAuthentication returns the value of UserAuthentication.
func (s *GetUserAuthenticationOKApigw) GetUserAuthentication() OptUserAuthentication {
	return s.UserAuthentication
}

// SetUserAuthentication sets the value of UserAuthentication.
func (s *GetUserAuthenticationOKApigw) SetUserAuthentication(val OptUserAuthentication) {
	s.UserAuthentication = val
}

type GetUserAuthenticationUnauthorized ErrorSchema

func (*GetUserAuthenticationUnauthorized) getUserAuthenticationRes() {}

type GetUserBadRequest ErrorSchema

func (*GetUserBadRequest) getUserRes() {}

type GetUserGroupBadRequest ErrorSchema

func (*GetUserGroupBadRequest) getUserGroupRes() {}

type GetUserGroupInternalServerError ErrorSchema

func (*GetUserGroupInternalServerError) getUserGroupRes() {}

type GetUserGroupNotFound ErrorSchema

func (*GetUserGroupNotFound) getUserGroupRes() {}

type GetUserGroupOK struct {
	Apigw GetUserGroupOKApigw `json:"apigw"`
}

// GetApigw returns the value of Apigw.
func (s *GetUserGroupOK) GetApigw() GetUserGroupOKApigw {
	return s.Apigw
}

// SetApigw sets the value of Apigw.
func (s *GetUserGroupOK) SetApigw(val GetUserGroupOKApigw) {
	s.Apigw = val
}

func (*GetUserGroupOK) getUserGroupRes() {}

type GetUserGroupOKApigw struct {
	Groups []UserGroupDetail `json:"groups"`
}

// GetGroups returns the value of Groups.
func (s *GetUserGroupOKApigw) GetGroups() []UserGroupDetail {
	return s.Groups
}

// SetGroups sets the value of Groups.
func (s *GetUserGroupOKApigw) SetGroups(val []UserGroupDetail) {
	s.Groups = val
}

type GetUserInternalServerError ErrorSchema

func (*GetUserInternalServerError) getUserRes() {}

type GetUserNotFound ErrorSchema

func (*GetUserNotFound) getUserRes() {}

type GetUserOK struct {
	Apigw GetUserOKApigw `json:"apigw"`
}

// GetApigw returns the value of Apigw.
func (s *GetUserOK) GetApigw() GetUserOKApigw {
	return s.Apigw
}

// SetApigw sets the value of Apigw.
func (s *GetUserOK) SetApigw(val GetUserOKApigw) {
	s.Apigw = val
}

func (*GetUserOK) getUserRes() {}

type GetUserOKApigw struct {
	User OptUserDetail `json:"user"`
}

// GetUser returns the value of User.
func (s *GetUserOKApigw) GetUser() OptUserDetail {
	return s.User
}

// SetUser sets the value of User.
func (s *GetUserOKApigw) SetUser(val OptUserDetail) {
	s.User = val
}

type GetUserUnauthorized ErrorSchema

func (*GetUserUnauthorized) getUserRes() {}

type GetUsersBadRequest ErrorSchema

func (*GetUsersBadRequest) getUsersRes() {}

type GetUsersInternalServerError ErrorSchema

func (*GetUsersInternalServerError) getUsersRes() {}

type GetUsersOK struct {
	Apigw GetUsersOKApigw `json:"apigw"`
}

// GetApigw returns the value of Apigw.
func (s *GetUsersOK) GetApigw() GetUsersOKApigw {
	return s.Apigw
}

// SetApigw sets the value of Apigw.
func (s *GetUsersOK) SetApigw(val GetUsersOKApigw) {
	s.Apigw = val
}

func (*GetUsersOK) getUsersRes() {}

type GetUsersOKApigw struct {
	Users []User `json:"users"`
}

// GetUsers returns the value of Users.
func (s *GetUsersOKApigw) GetUsers() []User {
	return s.Users
}

// SetUsers sets the value of Users.
func (s *GetUsersOKApigw) SetUsers(val []User) {
	s.Users = val
}

type GetUsersUnauthorized ErrorSchema

func (*GetUsersUnauthorized) getUsersRes() {}

// Merged schema.
// Ref: #/components/schemas/Group
type Group struct {
	// Entityを識別するためのID.
	ID OptUUID `json:"id"`
	// 作成日時.
	CreatedAt OptDateTime `json:"createdAt"`
	// 更新日時.
	UpdatedAt OptDateTime `json:"updatedAt"`
	Name      OptName     `json:"name"`
	// Groupを検索するためのタグ.
	Tags Tags `json:"tags"`
}

// GetID returns the value of ID.
func (s *Group) GetID() OptUUID {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Group) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Group) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *Group) GetName() OptName {
	return s.Name
}

// GetTags returns the value of Tags.
func (s *Group) GetTags() Tags {
	return s.Tags
}

// SetID sets the value of ID.
func (s *Group) SetID(val OptUUID) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Group) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Group) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *Group) SetName(val OptName) {
	s.Name = val
}

// SetTags sets the value of Tags.
func (s *Group) SetTags(val Tags) {
	s.Tags = val
}

// 変換するHTTPメソッド.
// Ref: #/components/schemas/HTTPMethod
type HTTPMethod string

const (
	HTTPMethodGET     HTTPMethod = "GET"
	HTTPMethodPOST    HTTPMethod = "POST"
	HTTPMethodPUT     HTTPMethod = "PUT"
	HTTPMethodDELETE  HTTPMethod = "DELETE"
	HTTPMethodPATCH   HTTPMethod = "PATCH"
	HTTPMethodOPTIONS HTTPMethod = "OPTIONS"
	HTTPMethodHEAD    HTTPMethod = "HEAD"
	HTTPMethodCONNECT HTTPMethod = "CONNECT"
	HTTPMethodTRACE   HTTPMethod = "TRACE"
)

// AllValues returns all HTTPMethod values.
func (HTTPMethod) AllValues() []HTTPMethod {
	return []HTTPMethod{
		HTTPMethodGET,
		HTTPMethodPOST,
		HTTPMethodPUT,
		HTTPMethodDELETE,
		HTTPMethodPATCH,
		HTTPMethodOPTIONS,
		HTTPMethodHEAD,
		HTTPMethodCONNECT,
		HTTPMethodTRACE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s HTTPMethod) MarshalText() ([]byte, error) {
	switch s {
	case HTTPMethodGET:
		return []byte(s), nil
	case HTTPMethodPOST:
		return []byte(s), nil
	case HTTPMethodPUT:
		return []byte(s), nil
	case HTTPMethodDELETE:
		return []byte(s), nil
	case HTTPMethodPATCH:
		return []byte(s), nil
	case HTTPMethodOPTIONS:
		return []byte(s), nil
	case HTTPMethodHEAD:
		return []byte(s), nil
	case HTTPMethodCONNECT:
		return []byte(s), nil
	case HTTPMethodTRACE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HTTPMethod) UnmarshalText(data []byte) error {
	switch HTTPMethod(data) {
	case HTTPMethodGET:
		*s = HTTPMethodGET
		return nil
	case HTTPMethodPOST:
		*s = HTTPMethodPOST
		return nil
	case HTTPMethodPUT:
		*s = HTTPMethodPUT
		return nil
	case HTTPMethodDELETE:
		*s = HTTPMethodDELETE
		return nil
	case HTTPMethodPATCH:
		*s = HTTPMethodPATCH
		return nil
	case HTTPMethodOPTIONS:
		*s = HTTPMethodOPTIONS
		return nil
	case HTTPMethodHEAD:
		*s = HTTPMethodHEAD
		return nil
	case HTTPMethodCONNECT:
		*s = HTTPMethodCONNECT
		return nil
	case HTTPMethodTRACE:
		*s = HTTPMethodTRACE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/HmacAuth
type HmacAuth struct {
	// Entityを識別するためのID.
	ID OptUUID `json:"id"`
	// 作成日時.
	CreatedAt OptDateTime `json:"createdAt"`
	// 更新日時.
	UpdatedAt OptDateTime `json:"updatedAt"`
	// ユーザ名.
	UserName string `json:"userName"`
	// HMACのシークレット.
	Secret string `json:"secret"`
}

// GetID returns the value of ID.
func (s *HmacAuth) GetID() OptUUID {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *HmacAuth) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *HmacAuth) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetUserName returns the value of UserName.
func (s *HmacAuth) GetUserName() string {
	return s.UserName
}

// GetSecret returns the value of Secret.
func (s *HmacAuth) GetSecret() string {
	return s.Secret
}

// SetID sets the value of ID.
func (s *HmacAuth) SetID(val OptUUID) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *HmacAuth) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *HmacAuth) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetUserName sets the value of UserName.
func (s *HmacAuth) SetUserName(val string) {
	s.UserName = val
}

// SetSecret sets the value of Secret.
func (s *HmacAuth) SetSecret(val string) {
	s.Secret = val
}

type JSONKey string

// Merged schema.
// Ref: #/components/schemas/Jwt
type Jwt struct {
	// Entityを識別するためのID.
	ID OptUUID `json:"id"`
	// 作成日時.
	CreatedAt OptDateTime `json:"createdAt"`
	// 更新日時.
	UpdatedAt OptDateTime `json:"updatedAt"`
	// JWTの署名キー.
	Key string `json:"key"`
	// JWTの署名シークレット.
	Secret string `json:"secret"`
	// JWTの署名アルゴリズム.
	Algorithm JwtAlgorithm `json:"algorithm"`
}

// GetID returns the value of ID.
func (s *Jwt) GetID() OptUUID {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Jwt) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Jwt) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetKey returns the value of Key.
func (s *Jwt) GetKey() string {
	return s.Key
}

// GetSecret returns the value of Secret.
func (s *Jwt) GetSecret() string {
	return s.Secret
}

// GetAlgorithm returns the value of Algorithm.
func (s *Jwt) GetAlgorithm() JwtAlgorithm {
	return s.Algorithm
}

// SetID sets the value of ID.
func (s *Jwt) SetID(val OptUUID) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Jwt) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Jwt) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetKey sets the value of Key.
func (s *Jwt) SetKey(val string) {
	s.Key = val
}

// SetSecret sets the value of Secret.
func (s *Jwt) SetSecret(val string) {
	s.Secret = val
}

// SetAlgorithm sets the value of Algorithm.
func (s *Jwt) SetAlgorithm(val JwtAlgorithm) {
	s.Algorithm = val
}

// JWTの署名アルゴリズム.
type JwtAlgorithm string

const (
	JwtAlgorithmHS256 JwtAlgorithm = "HS256"
	JwtAlgorithmHS384 JwtAlgorithm = "HS384"
	JwtAlgorithmHS512 JwtAlgorithm = "HS512"
)

// AllValues returns all JwtAlgorithm values.
func (JwtAlgorithm) AllValues() []JwtAlgorithm {
	return []JwtAlgorithm{
		JwtAlgorithmHS256,
		JwtAlgorithmHS384,
		JwtAlgorithmHS512,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s JwtAlgorithm) MarshalText() ([]byte, error) {
	switch s {
	case JwtAlgorithmHS256:
		return []byte(s), nil
	case JwtAlgorithmHS384:
		return []byte(s), nil
	case JwtAlgorithmHS512:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *JwtAlgorithm) UnmarshalText(data []byte) error {
	switch JwtAlgorithm(data) {
	case JwtAlgorithmHS256:
		*s = JwtAlgorithmHS256
		return nil
	case JwtAlgorithmHS384:
		*s = JwtAlgorithmHS384
		return nil
	case JwtAlgorithmHS512:
		*s = JwtAlgorithmHS512
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Name string

// Merged schema.
// Ref: #/components/schemas/Oidc
type Oidc struct {
	// Entityを識別するためのID.
	ID OptUUID `json:"id"`
	// 作成日時.
	CreatedAt OptDateTime `json:"createdAt"`
	// 更新日時.
	UpdatedAt OptDateTime `json:"updatedAt"`
	// 認証名<br>認証名は半角英数字およびアンダースコアのみを許可.
	Name Name `json:"name"`
	// IdPにアクセスするためのプロトコル.
	Protocols             []OidcProtocolsItem   `json:"protocols"`
	AuthenticationMethods AuthenticationMethods `json:"authenticationMethods"`
	// IdPに紐づくエンドポイント.
	Issuer string `json:"issuer"`
	// IdPに紐づくクライアントID.
	ClientId string `json:"clientId"`
	// IdPに紐づくクライアントシークレット.
	ClientSecret string `json:"clientSecret"`
	// IdPに要求するスコープ.
	Scopes []string `json:"scopes"`
	// 認証情報のサービス（アップストリームサーバ）への転送を有効にするかどうか.
	HideCredentials OptBool `json:"hideCredentials"`
	// トークンaudクレーム検証値.
	TokenAudiences []string `json:"tokenAudiences"`
	// リフレッシュトークンパラメータ名<br>指定がない場合は"refresh_token"が設定される<br>※authenticationMethodsに"refreshToken"が含まれる場合に使用される.
	RefreshTokenParamName OptString `json:"refreshTokenParamName"`
}

// GetID returns the value of ID.
func (s *Oidc) GetID() OptUUID {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Oidc) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Oidc) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *Oidc) GetName() Name {
	return s.Name
}

// GetProtocols returns the value of Protocols.
func (s *Oidc) GetProtocols() []OidcProtocolsItem {
	return s.Protocols
}

// GetAuthenticationMethods returns the value of AuthenticationMethods.
func (s *Oidc) GetAuthenticationMethods() AuthenticationMethods {
	return s.AuthenticationMethods
}

// GetIssuer returns the value of Issuer.
func (s *Oidc) GetIssuer() string {
	return s.Issuer
}

// GetClientId returns the value of ClientId.
func (s *Oidc) GetClientId() string {
	return s.ClientId
}

// GetClientSecret returns the value of ClientSecret.
func (s *Oidc) GetClientSecret() string {
	return s.ClientSecret
}

// GetScopes returns the value of Scopes.
func (s *Oidc) GetScopes() []string {
	return s.Scopes
}

// GetHideCredentials returns the value of HideCredentials.
func (s *Oidc) GetHideCredentials() OptBool {
	return s.HideCredentials
}

// GetTokenAudiences returns the value of TokenAudiences.
func (s *Oidc) GetTokenAudiences() []string {
	return s.TokenAudiences
}

// GetRefreshTokenParamName returns the value of RefreshTokenParamName.
func (s *Oidc) GetRefreshTokenParamName() OptString {
	return s.RefreshTokenParamName
}

// SetID sets the value of ID.
func (s *Oidc) SetID(val OptUUID) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Oidc) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Oidc) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *Oidc) SetName(val Name) {
	s.Name = val
}

// SetProtocols sets the value of Protocols.
func (s *Oidc) SetProtocols(val []OidcProtocolsItem) {
	s.Protocols = val
}

// SetAuthenticationMethods sets the value of AuthenticationMethods.
func (s *Oidc) SetAuthenticationMethods(val AuthenticationMethods) {
	s.AuthenticationMethods = val
}

// SetIssuer sets the value of Issuer.
func (s *Oidc) SetIssuer(val string) {
	s.Issuer = val
}

// SetClientId sets the value of ClientId.
func (s *Oidc) SetClientId(val string) {
	s.ClientId = val
}

// SetClientSecret sets the value of ClientSecret.
func (s *Oidc) SetClientSecret(val string) {
	s.ClientSecret = val
}

// SetScopes sets the value of Scopes.
func (s *Oidc) SetScopes(val []string) {
	s.Scopes = val
}

// SetHideCredentials sets the value of HideCredentials.
func (s *Oidc) SetHideCredentials(val OptBool) {
	s.HideCredentials = val
}

// SetTokenAudiences sets the value of TokenAudiences.
func (s *Oidc) SetTokenAudiences(val []string) {
	s.TokenAudiences = val
}

// SetRefreshTokenParamName sets the value of RefreshTokenParamName.
func (s *Oidc) SetRefreshTokenParamName(val OptString) {
	s.RefreshTokenParamName = val
}

type OidcProtocolsItem string

const (
	OidcProtocolsItemHTTP  OidcProtocolsItem = "http"
	OidcProtocolsItemHTTPS OidcProtocolsItem = "https"
)

// AllValues returns all OidcProtocolsItem values.
func (OidcProtocolsItem) AllValues() []OidcProtocolsItem {
	return []OidcProtocolsItem{
		OidcProtocolsItemHTTP,
		OidcProtocolsItemHTTPS,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OidcProtocolsItem) MarshalText() ([]byte, error) {
	switch s {
	case OidcProtocolsItemHTTP:
		return []byte(s), nil
	case OidcProtocolsItemHTTPS:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OidcProtocolsItem) UnmarshalText(data []byte) error {
	switch OidcProtocolsItem(data) {
	case OidcProtocolsItemHTTP:
		*s = OidcProtocolsItemHTTP
		return nil
	case OidcProtocolsItemHTTPS:
		*s = OidcProtocolsItemHTTPS
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// NewOptBasicAuth returns new OptBasicAuth with value set to v.
func NewOptBasicAuth(v BasicAuth) OptBasicAuth {
	return OptBasicAuth{
		Value: v,
		Set:   true,
	}
}

// OptBasicAuth is optional BasicAuth.
type OptBasicAuth struct {
	Value BasicAuth
	Set   bool
}

// IsSet returns true if OptBasicAuth was set.
func (o OptBasicAuth) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBasicAuth) Reset() {
	var v BasicAuth
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBasicAuth) SetTo(v BasicAuth) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBasicAuth) Get() (v BasicAuth, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBasicAuth) Or(d BasicAuth) BasicAuth {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCertificate returns new OptCertificate with value set to v.
func NewOptCertificate(v Certificate) OptCertificate {
	return OptCertificate{
		Value: v,
		Set:   true,
	}
}

// OptCertificate is optional Certificate.
type OptCertificate struct {
	Value Certificate
	Set   bool
}

// IsSet returns true if OptCertificate was set.
func (o OptCertificate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCertificate) Reset() {
	var v Certificate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCertificate) SetTo(v Certificate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCertificate) Get() (v Certificate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCertificate) Or(d Certificate) Certificate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCertificateDetails returns new OptCertificateDetails with value set to v.
func NewOptCertificateDetails(v CertificateDetails) OptCertificateDetails {
	return OptCertificateDetails{
		Value: v,
		Set:   true,
	}
}

// OptCertificateDetails is optional CertificateDetails.
type OptCertificateDetails struct {
	Value CertificateDetails
	Set   bool
}

// IsSet returns true if OptCertificateDetails was set.
func (o OptCertificateDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCertificateDetails) Reset() {
	var v CertificateDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCertificateDetails) SetTo(v CertificateDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCertificateDetails) Get() (v CertificateDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCertificateDetails) Or(d CertificateDetails) CertificateDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDomain returns new OptDomain with value set to v.
func NewOptDomain(v Domain) OptDomain {
	return OptDomain{
		Value: v,
		Set:   true,
	}
}

// OptDomain is optional Domain.
type OptDomain struct {
	Value Domain
	Set   bool
}

// IsSet returns true if OptDomain was set.
func (o OptDomain) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDomain) Reset() {
	var v Domain
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDomain) SetTo(v Domain) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDomain) Get() (v Domain, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDomain) Or(d Domain) Domain {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGroup returns new OptGroup with value set to v.
func NewOptGroup(v Group) OptGroup {
	return OptGroup{
		Value: v,
		Set:   true,
	}
}

// OptGroup is optional Group.
type OptGroup struct {
	Value Group
	Set   bool
}

// IsSet returns true if OptGroup was set.
func (o OptGroup) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGroup) Reset() {
	var v Group
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGroup) SetTo(v Group) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGroup) Get() (v Group, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGroup) Or(d Group) Group {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHTTPMethod returns new OptHTTPMethod with value set to v.
func NewOptHTTPMethod(v HTTPMethod) OptHTTPMethod {
	return OptHTTPMethod{
		Value: v,
		Set:   true,
	}
}

// OptHTTPMethod is optional HTTPMethod.
type OptHTTPMethod struct {
	Value HTTPMethod
	Set   bool
}

// IsSet returns true if OptHTTPMethod was set.
func (o OptHTTPMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHTTPMethod) Reset() {
	var v HTTPMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHTTPMethod) SetTo(v HTTPMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHTTPMethod) Get() (v HTTPMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHTTPMethod) Or(d HTTPMethod) HTTPMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHmacAuth returns new OptHmacAuth with value set to v.
func NewOptHmacAuth(v HmacAuth) OptHmacAuth {
	return OptHmacAuth{
		Value: v,
		Set:   true,
	}
}

// OptHmacAuth is optional HmacAuth.
type OptHmacAuth struct {
	Value HmacAuth
	Set   bool
}

// IsSet returns true if OptHmacAuth was set.
func (o OptHmacAuth) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHmacAuth) Reset() {
	var v HmacAuth
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHmacAuth) SetTo(v HmacAuth) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHmacAuth) Get() (v HmacAuth, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHmacAuth) Or(d HmacAuth) HmacAuth {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJSONKey returns new OptJSONKey with value set to v.
func NewOptJSONKey(v JSONKey) OptJSONKey {
	return OptJSONKey{
		Value: v,
		Set:   true,
	}
}

// OptJSONKey is optional JSONKey.
type OptJSONKey struct {
	Value JSONKey
	Set   bool
}

// IsSet returns true if OptJSONKey was set.
func (o OptJSONKey) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJSONKey) Reset() {
	var v JSONKey
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJSONKey) SetTo(v JSONKey) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJSONKey) Get() (v JSONKey, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJSONKey) Or(d JSONKey) JSONKey {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJwt returns new OptJwt with value set to v.
func NewOptJwt(v Jwt) OptJwt {
	return OptJwt{
		Value: v,
		Set:   true,
	}
}

// OptJwt is optional Jwt.
type OptJwt struct {
	Value Jwt
	Set   bool
}

// IsSet returns true if OptJwt was set.
func (o OptJwt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJwt) Reset() {
	var v Jwt
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJwt) SetTo(v Jwt) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJwt) Get() (v Jwt, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJwt) Or(d Jwt) Jwt {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptName returns new OptName with value set to v.
func NewOptName(v Name) OptName {
	return OptName{
		Value: v,
		Set:   true,
	}
}

// OptName is optional Name.
type OptName struct {
	Value Name
	Set   bool
}

// IsSet returns true if OptName was set.
func (o OptName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptName) Reset() {
	var v Name
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptName) SetTo(v Name) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptName) Get() (v Name, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptName) Or(d Name) Name {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOidc returns new OptOidc with value set to v.
func NewOptOidc(v Oidc) OptOidc {
	return OptOidc{
		Value: v,
		Set:   true,
	}
}

// OptOidc is optional Oidc.
type OptOidc struct {
	Value Oidc
	Set   bool
}

// IsSet returns true if OptOidc was set.
func (o OptOidc) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOidc) Reset() {
	var v Oidc
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOidc) SetTo(v Oidc) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOidc) Get() (v Oidc, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOidc) Or(d Oidc) Oidc {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlan returns new OptPlan with value set to v.
func NewOptPlan(v Plan) OptPlan {
	return OptPlan{
		Value: v,
		Set:   true,
	}
}

// OptPlan is optional Plan.
type OptPlan struct {
	Value Plan
	Set   bool
}

// IsSet returns true if OptPlan was set.
func (o OptPlan) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlan) Reset() {
	var v Plan
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlan) SetTo(v Plan) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlan) Get() (v Plan, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlan) Or(d Plan) Plan {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanMaxRequestsUnit returns new OptPlanMaxRequestsUnit with value set to v.
func NewOptPlanMaxRequestsUnit(v PlanMaxRequestsUnit) OptPlanMaxRequestsUnit {
	return OptPlanMaxRequestsUnit{
		Value: v,
		Set:   true,
	}
}

// OptPlanMaxRequestsUnit is optional PlanMaxRequestsUnit.
type OptPlanMaxRequestsUnit struct {
	Value PlanMaxRequestsUnit
	Set   bool
}

// IsSet returns true if OptPlanMaxRequestsUnit was set.
func (o OptPlanMaxRequestsUnit) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanMaxRequestsUnit) Reset() {
	var v PlanMaxRequestsUnit
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanMaxRequestsUnit) SetTo(v PlanMaxRequestsUnit) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanMaxRequestsUnit) Get() (v PlanMaxRequestsUnit, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanMaxRequestsUnit) Or(d PlanMaxRequestsUnit) PlanMaxRequestsUnit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptQueryParamKey returns new OptQueryParamKey with value set to v.
func NewOptQueryParamKey(v QueryParamKey) OptQueryParamKey {
	return OptQueryParamKey{
		Value: v,
		Set:   true,
	}
}

// OptQueryParamKey is optional QueryParamKey.
type OptQueryParamKey struct {
	Value QueryParamKey
	Set   bool
}

// IsSet returns true if OptQueryParamKey was set.
func (o OptQueryParamKey) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptQueryParamKey) Reset() {
	var v QueryParamKey
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptQueryParamKey) SetTo(v QueryParamKey) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptQueryParamKey) Get() (v QueryParamKey, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptQueryParamKey) Or(d QueryParamKey) QueryParamKey {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptQueryParamValue returns new OptQueryParamValue with value set to v.
func NewOptQueryParamValue(v QueryParamValue) OptQueryParamValue {
	return OptQueryParamValue{
		Value: v,
		Set:   true,
	}
}

// OptQueryParamValue is optional QueryParamValue.
type OptQueryParamValue struct {
	Value QueryParamValue
	Set   bool
}

// IsSet returns true if OptQueryParamValue was set.
func (o OptQueryParamValue) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptQueryParamValue) Reset() {
	var v QueryParamValue
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptQueryParamValue) SetTo(v QueryParamValue) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptQueryParamValue) Get() (v QueryParamValue, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptQueryParamValue) Or(d QueryParamValue) QueryParamValue {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRequestAllowDetail returns new OptRequestAllowDetail with value set to v.
func NewOptRequestAllowDetail(v RequestAllowDetail) OptRequestAllowDetail {
	return OptRequestAllowDetail{
		Value: v,
		Set:   true,
	}
}

// OptRequestAllowDetail is optional RequestAllowDetail.
type OptRequestAllowDetail struct {
	Value RequestAllowDetail
	Set   bool
}

// IsSet returns true if OptRequestAllowDetail was set.
func (o OptRequestAllowDetail) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRequestAllowDetail) Reset() {
	var v RequestAllowDetail
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRequestAllowDetail) SetTo(v RequestAllowDetail) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRequestAllowDetail) Get() (v RequestAllowDetail, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRequestAllowDetail) Or(d RequestAllowDetail) RequestAllowDetail {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRequestHeaderKey returns new OptRequestHeaderKey with value set to v.
func NewOptRequestHeaderKey(v RequestHeaderKey) OptRequestHeaderKey {
	return OptRequestHeaderKey{
		Value: v,
		Set:   true,
	}
}

// OptRequestHeaderKey is optional RequestHeaderKey.
type OptRequestHeaderKey struct {
	Value RequestHeaderKey
	Set   bool
}

// IsSet returns true if OptRequestHeaderKey was set.
func (o OptRequestHeaderKey) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRequestHeaderKey) Reset() {
	var v RequestHeaderKey
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRequestHeaderKey) SetTo(v RequestHeaderKey) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRequestHeaderKey) Get() (v RequestHeaderKey, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRequestHeaderKey) Or(d RequestHeaderKey) RequestHeaderKey {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRequestHeaderValue returns new OptRequestHeaderValue with value set to v.
func NewOptRequestHeaderValue(v RequestHeaderValue) OptRequestHeaderValue {
	return OptRequestHeaderValue{
		Value: v,
		Set:   true,
	}
}

// OptRequestHeaderValue is optional RequestHeaderValue.
type OptRequestHeaderValue struct {
	Value RequestHeaderValue
	Set   bool
}

// IsSet returns true if OptRequestHeaderValue was set.
func (o OptRequestHeaderValue) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRequestHeaderValue) Reset() {
	var v RequestHeaderValue
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRequestHeaderValue) SetTo(v RequestHeaderValue) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRequestHeaderValue) Get() (v RequestHeaderValue, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRequestHeaderValue) Or(d RequestHeaderValue) RequestHeaderValue {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRequestRemoveDetail returns new OptRequestRemoveDetail with value set to v.
func NewOptRequestRemoveDetail(v RequestRemoveDetail) OptRequestRemoveDetail {
	return OptRequestRemoveDetail{
		Value: v,
		Set:   true,
	}
}

// OptRequestRemoveDetail is optional RequestRemoveDetail.
type OptRequestRemoveDetail struct {
	Value RequestRemoveDetail
	Set   bool
}

// IsSet returns true if OptRequestRemoveDetail was set.
func (o OptRequestRemoveDetail) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRequestRemoveDetail) Reset() {
	var v RequestRemoveDetail
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRequestRemoveDetail) SetTo(v RequestRemoveDetail) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRequestRemoveDetail) Get() (v RequestRemoveDetail, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRequestRemoveDetail) Or(d RequestRemoveDetail) RequestRemoveDetail {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRequestRenameDetail returns new OptRequestRenameDetail with value set to v.
func NewOptRequestRenameDetail(v RequestRenameDetail) OptRequestRenameDetail {
	return OptRequestRenameDetail{
		Value: v,
		Set:   true,
	}
}

// OptRequestRenameDetail is optional RequestRenameDetail.
type OptRequestRenameDetail struct {
	Value RequestRenameDetail
	Set   bool
}

// IsSet returns true if OptRequestRenameDetail was set.
func (o OptRequestRenameDetail) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRequestRenameDetail) Reset() {
	var v RequestRenameDetail
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRequestRenameDetail) SetTo(v RequestRenameDetail) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRequestRenameDetail) Get() (v RequestRenameDetail, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRequestRenameDetail) Or(d RequestRenameDetail) RequestRenameDetail {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRequestTransformation returns new OptRequestTransformation with value set to v.
func NewOptRequestTransformation(v RequestTransformation) OptRequestTransformation {
	return OptRequestTransformation{
		Value: v,
		Set:   true,
	}
}

// OptRequestTransformation is optional RequestTransformation.
type OptRequestTransformation struct {
	Value RequestTransformation
	Set   bool
}

// IsSet returns true if OptRequestTransformation was set.
func (o OptRequestTransformation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRequestTransformation) Reset() {
	var v RequestTransformation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRequestTransformation) SetTo(v RequestTransformation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRequestTransformation) Get() (v RequestTransformation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRequestTransformation) Or(d RequestTransformation) RequestTransformation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResponseAllowDetail returns new OptResponseAllowDetail with value set to v.
func NewOptResponseAllowDetail(v ResponseAllowDetail) OptResponseAllowDetail {
	return OptResponseAllowDetail{
		Value: v,
		Set:   true,
	}
}

// OptResponseAllowDetail is optional ResponseAllowDetail.
type OptResponseAllowDetail struct {
	Value ResponseAllowDetail
	Set   bool
}

// IsSet returns true if OptResponseAllowDetail was set.
func (o OptResponseAllowDetail) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResponseAllowDetail) Reset() {
	var v ResponseAllowDetail
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResponseAllowDetail) SetTo(v ResponseAllowDetail) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResponseAllowDetail) Get() (v ResponseAllowDetail, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResponseAllowDetail) Or(d ResponseAllowDetail) ResponseAllowDetail {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResponseHeaderKey returns new OptResponseHeaderKey with value set to v.
func NewOptResponseHeaderKey(v ResponseHeaderKey) OptResponseHeaderKey {
	return OptResponseHeaderKey{
		Value: v,
		Set:   true,
	}
}

// OptResponseHeaderKey is optional ResponseHeaderKey.
type OptResponseHeaderKey struct {
	Value ResponseHeaderKey
	Set   bool
}

// IsSet returns true if OptResponseHeaderKey was set.
func (o OptResponseHeaderKey) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResponseHeaderKey) Reset() {
	var v ResponseHeaderKey
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResponseHeaderKey) SetTo(v ResponseHeaderKey) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResponseHeaderKey) Get() (v ResponseHeaderKey, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResponseHeaderKey) Or(d ResponseHeaderKey) ResponseHeaderKey {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResponseModification returns new OptResponseModification with value set to v.
func NewOptResponseModification(v ResponseModification) OptResponseModification {
	return OptResponseModification{
		Value: v,
		Set:   true,
	}
}

// OptResponseModification is optional ResponseModification.
type OptResponseModification struct {
	Value ResponseModification
	Set   bool
}

// IsSet returns true if OptResponseModification was set.
func (o OptResponseModification) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResponseModification) Reset() {
	var v ResponseModification
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResponseModification) SetTo(v ResponseModification) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResponseModification) Get() (v ResponseModification, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResponseModification) Or(d ResponseModification) ResponseModification {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResponseModificationDetail returns new OptResponseModificationDetail with value set to v.
func NewOptResponseModificationDetail(v ResponseModificationDetail) OptResponseModificationDetail {
	return OptResponseModificationDetail{
		Value: v,
		Set:   true,
	}
}

// OptResponseModificationDetail is optional ResponseModificationDetail.
type OptResponseModificationDetail struct {
	Value ResponseModificationDetail
	Set   bool
}

// IsSet returns true if OptResponseModificationDetail was set.
func (o OptResponseModificationDetail) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResponseModificationDetail) Reset() {
	var v ResponseModificationDetail
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResponseModificationDetail) SetTo(v ResponseModificationDetail) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResponseModificationDetail) Get() (v ResponseModificationDetail, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResponseModificationDetail) Or(d ResponseModificationDetail) ResponseModificationDetail {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResponseRemoveDetail returns new OptResponseRemoveDetail with value set to v.
func NewOptResponseRemoveDetail(v ResponseRemoveDetail) OptResponseRemoveDetail {
	return OptResponseRemoveDetail{
		Value: v,
		Set:   true,
	}
}

// OptResponseRemoveDetail is optional ResponseRemoveDetail.
type OptResponseRemoveDetail struct {
	Value ResponseRemoveDetail
	Set   bool
}

// IsSet returns true if OptResponseRemoveDetail was set.
func (o OptResponseRemoveDetail) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResponseRemoveDetail) Reset() {
	var v ResponseRemoveDetail
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResponseRemoveDetail) SetTo(v ResponseRemoveDetail) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResponseRemoveDetail) Get() (v ResponseRemoveDetail, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResponseRemoveDetail) Or(d ResponseRemoveDetail) ResponseRemoveDetail {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResponseRenameDetail returns new OptResponseRenameDetail with value set to v.
func NewOptResponseRenameDetail(v ResponseRenameDetail) OptResponseRenameDetail {
	return OptResponseRenameDetail{
		Value: v,
		Set:   true,
	}
}

// OptResponseRenameDetail is optional ResponseRenameDetail.
type OptResponseRenameDetail struct {
	Value ResponseRenameDetail
	Set   bool
}

// IsSet returns true if OptResponseRenameDetail was set.
func (o OptResponseRenameDetail) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResponseRenameDetail) Reset() {
	var v ResponseRenameDetail
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResponseRenameDetail) SetTo(v ResponseRenameDetail) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResponseRenameDetail) Get() (v ResponseRenameDetail, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResponseRenameDetail) Or(d ResponseRenameDetail) ResponseRenameDetail {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResponseReplaceDetail returns new OptResponseReplaceDetail with value set to v.
func NewOptResponseReplaceDetail(v ResponseReplaceDetail) OptResponseReplaceDetail {
	return OptResponseReplaceDetail{
		Value: v,
		Set:   true,
	}
}

// OptResponseReplaceDetail is optional ResponseReplaceDetail.
type OptResponseReplaceDetail struct {
	Value ResponseReplaceDetail
	Set   bool
}

// IsSet returns true if OptResponseReplaceDetail was set.
func (o OptResponseReplaceDetail) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResponseReplaceDetail) Reset() {
	var v ResponseReplaceDetail
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResponseReplaceDetail) SetTo(v ResponseReplaceDetail) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResponseReplaceDetail) Get() (v ResponseReplaceDetail, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResponseReplaceDetail) Or(d ResponseReplaceDetail) ResponseReplaceDetail {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResponseTransformation returns new OptResponseTransformation with value set to v.
func NewOptResponseTransformation(v ResponseTransformation) OptResponseTransformation {
	return OptResponseTransformation{
		Value: v,
		Set:   true,
	}
}

// OptResponseTransformation is optional ResponseTransformation.
type OptResponseTransformation struct {
	Value ResponseTransformation
	Set   bool
}

// IsSet returns true if OptResponseTransformation was set.
func (o OptResponseTransformation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResponseTransformation) Reset() {
	var v ResponseTransformation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResponseTransformation) SetTo(v ResponseTransformation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResponseTransformation) Get() (v ResponseTransformation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResponseTransformation) Or(d ResponseTransformation) ResponseTransformation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRouteAuthorizationDetail returns new OptRouteAuthorizationDetail with value set to v.
func NewOptRouteAuthorizationDetail(v RouteAuthorizationDetail) OptRouteAuthorizationDetail {
	return OptRouteAuthorizationDetail{
		Value: v,
		Set:   true,
	}
}

// OptRouteAuthorizationDetail is optional RouteAuthorizationDetail.
type OptRouteAuthorizationDetail struct {
	Value RouteAuthorizationDetail
	Set   bool
}

// IsSet returns true if OptRouteAuthorizationDetail was set.
func (o OptRouteAuthorizationDetail) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRouteAuthorizationDetail) Reset() {
	var v RouteAuthorizationDetail
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRouteAuthorizationDetail) SetTo(v RouteAuthorizationDetail) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRouteAuthorizationDetail) Get() (v RouteAuthorizationDetail, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRouteAuthorizationDetail) Or(d RouteAuthorizationDetail) RouteAuthorizationDetail {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRouteDetailHttpsRedirectStatusCode returns new OptRouteDetailHttpsRedirectStatusCode with value set to v.
func NewOptRouteDetailHttpsRedirectStatusCode(v RouteDetailHttpsRedirectStatusCode) OptRouteDetailHttpsRedirectStatusCode {
	return OptRouteDetailHttpsRedirectStatusCode{
		Value: v,
		Set:   true,
	}
}

// OptRouteDetailHttpsRedirectStatusCode is optional RouteDetailHttpsRedirectStatusCode.
type OptRouteDetailHttpsRedirectStatusCode struct {
	Value RouteDetailHttpsRedirectStatusCode
	Set   bool
}

// IsSet returns true if OptRouteDetailHttpsRedirectStatusCode was set.
func (o OptRouteDetailHttpsRedirectStatusCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRouteDetailHttpsRedirectStatusCode) Reset() {
	var v RouteDetailHttpsRedirectStatusCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRouteDetailHttpsRedirectStatusCode) SetTo(v RouteDetailHttpsRedirectStatusCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRouteDetailHttpsRedirectStatusCode) Get() (v RouteDetailHttpsRedirectStatusCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRouteDetailHttpsRedirectStatusCode) Or(d RouteDetailHttpsRedirectStatusCode) RouteDetailHttpsRedirectStatusCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRouteDetailProtocols returns new OptRouteDetailProtocols with value set to v.
func NewOptRouteDetailProtocols(v RouteDetailProtocols) OptRouteDetailProtocols {
	return OptRouteDetailProtocols{
		Value: v,
		Set:   true,
	}
}

// OptRouteDetailProtocols is optional RouteDetailProtocols.
type OptRouteDetailProtocols struct {
	Value RouteDetailProtocols
	Set   bool
}

// IsSet returns true if OptRouteDetailProtocols was set.
func (o OptRouteDetailProtocols) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRouteDetailProtocols) Reset() {
	var v RouteDetailProtocols
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRouteDetailProtocols) SetTo(v RouteDetailProtocols) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRouteDetailProtocols) Get() (v RouteDetailProtocols, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRouteDetailProtocols) Or(d RouteDetailProtocols) RouteDetailProtocols {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServiceDetail returns new OptServiceDetail with value set to v.
func NewOptServiceDetail(v ServiceDetail) OptServiceDetail {
	return OptServiceDetail{
		Value: v,
		Set:   true,
	}
}

// OptServiceDetail is optional ServiceDetail.
type OptServiceDetail struct {
	Value ServiceDetail
	Set   bool
}

// IsSet returns true if OptServiceDetail was set.
func (o OptServiceDetail) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServiceDetail) Reset() {
	var v ServiceDetail
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServiceDetail) SetTo(v ServiceDetail) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServiceDetail) Get() (v ServiceDetail, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServiceDetail) Or(d ServiceDetail) ServiceDetail {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServiceDetailAuthentication returns new OptServiceDetailAuthentication with value set to v.
func NewOptServiceDetailAuthentication(v ServiceDetailAuthentication) OptServiceDetailAuthentication {
	return OptServiceDetailAuthentication{
		Value: v,
		Set:   true,
	}
}

// OptServiceDetailAuthentication is optional ServiceDetailAuthentication.
type OptServiceDetailAuthentication struct {
	Value ServiceDetailAuthentication
	Set   bool
}

// IsSet returns true if OptServiceDetailAuthentication was set.
func (o OptServiceDetailAuthentication) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServiceDetailAuthentication) Reset() {
	var v ServiceDetailAuthentication
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServiceDetailAuthentication) SetTo(v ServiceDetailAuthentication) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServiceDetailAuthentication) Get() (v ServiceDetailAuthentication, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServiceDetailAuthentication) Or(d ServiceDetailAuthentication) ServiceDetailAuthentication {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubscribedStatus returns new OptSubscribedStatus with value set to v.
func NewOptSubscribedStatus(v SubscribedStatus) OptSubscribedStatus {
	return OptSubscribedStatus{
		Value: v,
		Set:   true,
	}
}

// OptSubscribedStatus is optional SubscribedStatus.
type OptSubscribedStatus struct {
	Value SubscribedStatus
	Set   bool
}

// IsSet returns true if OptSubscribedStatus was set.
func (o OptSubscribedStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubscribedStatus) Reset() {
	var v SubscribedStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubscribedStatus) SetTo(v SubscribedStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubscribedStatus) Get() (v SubscribedStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubscribedStatus) Or(d SubscribedStatus) SubscribedStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubscriptionStatus returns new OptSubscriptionStatus with value set to v.
func NewOptSubscriptionStatus(v SubscriptionStatus) OptSubscriptionStatus {
	return OptSubscriptionStatus{
		Value: v,
		Set:   true,
	}
}

// OptSubscriptionStatus is optional SubscriptionStatus.
type OptSubscriptionStatus struct {
	Value SubscriptionStatus
	Set   bool
}

// IsSet returns true if OptSubscriptionStatus was set.
func (o OptSubscriptionStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubscriptionStatus) Reset() {
	var v SubscriptionStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubscriptionStatus) SetTo(v SubscriptionStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubscriptionStatus) Get() (v SubscriptionStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubscriptionStatus) Or(d SubscriptionStatus) SubscriptionStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUnsubscribedStatus returns new OptUnsubscribedStatus with value set to v.
func NewOptUnsubscribedStatus(v UnsubscribedStatus) OptUnsubscribedStatus {
	return OptUnsubscribedStatus{
		Value: v,
		Set:   true,
	}
}

// OptUnsubscribedStatus is optional UnsubscribedStatus.
type OptUnsubscribedStatus struct {
	Value UnsubscribedStatus
	Set   bool
}

// IsSet returns true if OptUnsubscribedStatus was set.
func (o OptUnsubscribedStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUnsubscribedStatus) Reset() {
	var v UnsubscribedStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUnsubscribedStatus) SetTo(v UnsubscribedStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUnsubscribedStatus) Get() (v UnsubscribedStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUnsubscribedStatus) Or(d UnsubscribedStatus) UnsubscribedStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserAuthentication returns new OptUserAuthentication with value set to v.
func NewOptUserAuthentication(v UserAuthentication) OptUserAuthentication {
	return OptUserAuthentication{
		Value: v,
		Set:   true,
	}
}

// OptUserAuthentication is optional UserAuthentication.
type OptUserAuthentication struct {
	Value UserAuthentication
	Set   bool
}

// IsSet returns true if OptUserAuthentication was set.
func (o OptUserAuthentication) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserAuthentication) Reset() {
	var v UserAuthentication
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserAuthentication) SetTo(v UserAuthentication) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserAuthentication) Get() (v UserAuthentication, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserAuthentication) Or(d UserAuthentication) UserAuthentication {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserDetail returns new OptUserDetail with value set to v.
func NewOptUserDetail(v UserDetail) OptUserDetail {
	return OptUserDetail{
		Value: v,
		Set:   true,
	}
}

// OptUserDetail is optional UserDetail.
type OptUserDetail struct {
	Value UserDetail
	Set   bool
}

// IsSet returns true if OptUserDetail was set.
func (o OptUserDetail) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserDetail) Reset() {
	var v UserDetail
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserDetail) SetTo(v UserDetail) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserDetail) Get() (v UserDetail, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserDetail) Or(d UserDetail) UserDetail {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Merged schema.
// Ref: #/components/schemas/Plan
type Plan struct {
	// Entityを識別するためのID.
	ID OptUUID `json:"id"`
	// 作成日時.
	CreatedAt OptDateTime `json:"createdAt"`
	// 更新日時.
	UpdatedAt OptDateTime `json:"updatedAt"`
	// プラン名.
	Name OptString `json:"name"`
	// 価格.
	Price OptFloat64 `json:"price"`
	// プランの説明.
	Description OptString `json:"description"`
	// 作成できるServiceの最大数.
	MaxServices OptInt `json:"maxServices"`
	// 最大Request数.
	MaxRequests OptInt `json:"maxRequests"`
	// 最大Request数の単位.
	MaxRequestsUnit OptPlanMaxRequestsUnit `json:"maxRequestsUnit"`
}

// GetID returns the value of ID.
func (s *Plan) GetID() OptUUID {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Plan) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Plan) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *Plan) GetName() OptString {
	return s.Name
}

// GetPrice returns the value of Price.
func (s *Plan) GetPrice() OptFloat64 {
	return s.Price
}

// GetDescription returns the value of Description.
func (s *Plan) GetDescription() OptString {
	return s.Description
}

// GetMaxServices returns the value of MaxServices.
func (s *Plan) GetMaxServices() OptInt {
	return s.MaxServices
}

// GetMaxRequests returns the value of MaxRequests.
func (s *Plan) GetMaxRequests() OptInt {
	return s.MaxRequests
}

// GetMaxRequestsUnit returns the value of MaxRequestsUnit.
func (s *Plan) GetMaxRequestsUnit() OptPlanMaxRequestsUnit {
	return s.MaxRequestsUnit
}

// SetID sets the value of ID.
func (s *Plan) SetID(val OptUUID) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Plan) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Plan) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *Plan) SetName(val OptString) {
	s.Name = val
}

// SetPrice sets the value of Price.
func (s *Plan) SetPrice(val OptFloat64) {
	s.Price = val
}

// SetDescription sets the value of Description.
func (s *Plan) SetDescription(val OptString) {
	s.Description = val
}

// SetMaxServices sets the value of MaxServices.
func (s *Plan) SetMaxServices(val OptInt) {
	s.MaxServices = val
}

// SetMaxRequests sets the value of MaxRequests.
func (s *Plan) SetMaxRequests(val OptInt) {
	s.MaxRequests = val
}

// SetMaxRequestsUnit sets the value of MaxRequestsUnit.
func (s *Plan) SetMaxRequestsUnit(val OptPlanMaxRequestsUnit) {
	s.MaxRequestsUnit = val
}

// 最大Request数の単位.
type PlanMaxRequestsUnit string

const (
	PlanMaxRequestsUnitSecond PlanMaxRequestsUnit = "second"
	PlanMaxRequestsUnitMinute PlanMaxRequestsUnit = "minute"
	PlanMaxRequestsUnitHour   PlanMaxRequestsUnit = "hour"
	PlanMaxRequestsUnitDay    PlanMaxRequestsUnit = "day"
	PlanMaxRequestsUnitMonth  PlanMaxRequestsUnit = "month"
	PlanMaxRequestsUnitYear   PlanMaxRequestsUnit = "year"
)

// AllValues returns all PlanMaxRequestsUnit values.
func (PlanMaxRequestsUnit) AllValues() []PlanMaxRequestsUnit {
	return []PlanMaxRequestsUnit{
		PlanMaxRequestsUnitSecond,
		PlanMaxRequestsUnitMinute,
		PlanMaxRequestsUnitHour,
		PlanMaxRequestsUnitDay,
		PlanMaxRequestsUnitMonth,
		PlanMaxRequestsUnitYear,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlanMaxRequestsUnit) MarshalText() ([]byte, error) {
	switch s {
	case PlanMaxRequestsUnitSecond:
		return []byte(s), nil
	case PlanMaxRequestsUnitMinute:
		return []byte(s), nil
	case PlanMaxRequestsUnitHour:
		return []byte(s), nil
	case PlanMaxRequestsUnitDay:
		return []byte(s), nil
	case PlanMaxRequestsUnitMonth:
		return []byte(s), nil
	case PlanMaxRequestsUnitYear:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlanMaxRequestsUnit) UnmarshalText(data []byte) error {
	switch PlanMaxRequestsUnit(data) {
	case PlanMaxRequestsUnitSecond:
		*s = PlanMaxRequestsUnitSecond
		return nil
	case PlanMaxRequestsUnitMinute:
		*s = PlanMaxRequestsUnitMinute
		return nil
	case PlanMaxRequestsUnitHour:
		*s = PlanMaxRequestsUnitHour
		return nil
	case PlanMaxRequestsUnitDay:
		*s = PlanMaxRequestsUnitDay
		return nil
	case PlanMaxRequestsUnitMonth:
		*s = PlanMaxRequestsUnitMonth
		return nil
	case PlanMaxRequestsUnitYear:
		*s = PlanMaxRequestsUnitYear
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type QueryParamKey string

type QueryParamValue string

// Ref: #/components/schemas/RequestAllowDetail
type RequestAllowDetail struct {
	// 許可するボディのキー<br>半角英数字、アンダースコア、ハイフンのみを許可.
	Body []JSONKey `json:"body"`
}

// GetBody returns the value of Body.
func (s *RequestAllowDetail) GetBody() []JSONKey {
	return s.Body
}

// SetBody sets the value of Body.
func (s *RequestAllowDetail) SetBody(val []JSONKey) {
	s.Body = val
}

type RequestHeaderKey string

type RequestHeaderValue string

// Ref: #/components/schemas/RequestRemoveDetail
type RequestRemoveDetail struct {
	// 削除するヘッダのキー<br>半角英数字、アンダースコア、ハイフンのみを許可.
	HeaderKeys []RequestHeaderKey `json:"headerKeys"`
	// 削除するクエリパラメータのキー<br>半角英数字、アンダースコア、ハイフンのみを許可.
	QueryParams []QueryParamKey `json:"queryParams"`
	// 削除するボディのキー<br>半角英数字、アンダースコア、ハイフンのみを許可.
	Body []JSONKey `json:"body"`
}

// GetHeaderKeys returns the value of HeaderKeys.
func (s *RequestRemoveDetail) GetHeaderKeys() []RequestHeaderKey {
	return s.HeaderKeys
}

// GetQueryParams returns the value of QueryParams.
func (s *RequestRemoveDetail) GetQueryParams() []QueryParamKey {
	return s.QueryParams
}

// GetBody returns the value of Body.
func (s *RequestRemoveDetail) GetBody() []JSONKey {
	return s.Body
}

// SetHeaderKeys sets the value of HeaderKeys.
func (s *RequestRemoveDetail) SetHeaderKeys(val []RequestHeaderKey) {
	s.HeaderKeys = val
}

// SetQueryParams sets the value of QueryParams.
func (s *RequestRemoveDetail) SetQueryParams(val []QueryParamKey) {
	s.QueryParams = val
}

// SetBody sets the value of Body.
func (s *RequestRemoveDetail) SetBody(val []JSONKey) {
	s.Body = val
}

// Ref: #/components/schemas/RequestRenameDetail
type RequestRenameDetail struct {
	Headers     []RequestRenameDetailHeadersItem     `json:"headers"`
	QueryParams []RequestRenameDetailQueryParamsItem `json:"queryParams"`
	Body        []RequestRenameDetailBodyItem        `json:"body"`
}

// GetHeaders returns the value of Headers.
func (s *RequestRenameDetail) GetHeaders() []RequestRenameDetailHeadersItem {
	return s.Headers
}

// GetQueryParams returns the value of QueryParams.
func (s *RequestRenameDetail) GetQueryParams() []RequestRenameDetailQueryParamsItem {
	return s.QueryParams
}

// GetBody returns the value of Body.
func (s *RequestRenameDetail) GetBody() []RequestRenameDetailBodyItem {
	return s.Body
}

// SetHeaders sets the value of Headers.
func (s *RequestRenameDetail) SetHeaders(val []RequestRenameDetailHeadersItem) {
	s.Headers = val
}

// SetQueryParams sets the value of QueryParams.
func (s *RequestRenameDetail) SetQueryParams(val []RequestRenameDetailQueryParamsItem) {
	s.QueryParams = val
}

// SetBody sets the value of Body.
func (s *RequestRenameDetail) SetBody(val []RequestRenameDetailBodyItem) {
	s.Body = val
}

type RequestRenameDetailBodyItem struct {
	// リネームするボディのキー.
	From OptJSONKey `json:"from"`
	// リネーム後のボディのキー.
	To OptJSONKey `json:"to"`
}

// GetFrom returns the value of From.
func (s *RequestRenameDetailBodyItem) GetFrom() OptJSONKey {
	return s.From
}

// GetTo returns the value of To.
func (s *RequestRenameDetailBodyItem) GetTo() OptJSONKey {
	return s.To
}

// SetFrom sets the value of From.
func (s *RequestRenameDetailBodyItem) SetFrom(val OptJSONKey) {
	s.From = val
}

// SetTo sets the value of To.
func (s *RequestRenameDetailBodyItem) SetTo(val OptJSONKey) {
	s.To = val
}

type RequestRenameDetailHeadersItem struct {
	From OptRequestHeaderKey `json:"from"`
	To   OptRequestHeaderKey `json:"to"`
}

// GetFrom returns the value of From.
func (s *RequestRenameDetailHeadersItem) GetFrom() OptRequestHeaderKey {
	return s.From
}

// GetTo returns the value of To.
func (s *RequestRenameDetailHeadersItem) GetTo() OptRequestHeaderKey {
	return s.To
}

// SetFrom sets the value of From.
func (s *RequestRenameDetailHeadersItem) SetFrom(val OptRequestHeaderKey) {
	s.From = val
}

// SetTo sets the value of To.
func (s *RequestRenameDetailHeadersItem) SetTo(val OptRequestHeaderKey) {
	s.To = val
}

type RequestRenameDetailQueryParamsItem struct {
	// リネームするクエリパラメータのキー.
	From OptQueryParamKey `json:"from"`
	// リネーム後のクエリパラメータのキー.
	To OptQueryParamKey `json:"to"`
}

// GetFrom returns the value of From.
func (s *RequestRenameDetailQueryParamsItem) GetFrom() OptQueryParamKey {
	return s.From
}

// GetTo returns the value of To.
func (s *RequestRenameDetailQueryParamsItem) GetTo() OptQueryParamKey {
	return s.To
}

// SetFrom sets the value of From.
func (s *RequestRenameDetailQueryParamsItem) SetFrom(val OptQueryParamKey) {
	s.From = val
}

// SetTo sets the value of To.
func (s *RequestRenameDetailQueryParamsItem) SetTo(val OptQueryParamKey) {
	s.To = val
}

// Ref: #/components/schemas/RequestTransformation
type RequestTransformation struct {
	HttpMethod OptHTTPMethod           `json:"httpMethod"`
	Allow      OptRequestAllowDetail   `json:"allow"`
	Remove     OptRequestRemoveDetail  `json:"remove"`
	Rename     OptRequestRenameDetail  `json:"rename"`
	Replace    OptResponseModification `json:"replace"`
	Add        OptResponseModification `json:"add"`
	Append     OptResponseModification `json:"append"`
}

// GetHttpMethod returns the value of HttpMethod.
func (s *RequestTransformation) GetHttpMethod() OptHTTPMethod {
	return s.HttpMethod
}

// GetAllow returns the value of Allow.
func (s *RequestTransformation) GetAllow() OptRequestAllowDetail {
	return s.Allow
}

// GetRemove returns the value of Remove.
func (s *RequestTransformation) GetRemove() OptRequestRemoveDetail {
	return s.Remove
}

// GetRename returns the value of Rename.
func (s *RequestTransformation) GetRename() OptRequestRenameDetail {
	return s.Rename
}

// GetReplace returns the value of Replace.
func (s *RequestTransformation) GetReplace() OptResponseModification {
	return s.Replace
}

// GetAdd returns the value of Add.
func (s *RequestTransformation) GetAdd() OptResponseModification {
	return s.Add
}

// GetAppend returns the value of Append.
func (s *RequestTransformation) GetAppend() OptResponseModification {
	return s.Append
}

// SetHttpMethod sets the value of HttpMethod.
func (s *RequestTransformation) SetHttpMethod(val OptHTTPMethod) {
	s.HttpMethod = val
}

// SetAllow sets the value of Allow.
func (s *RequestTransformation) SetAllow(val OptRequestAllowDetail) {
	s.Allow = val
}

// SetRemove sets the value of Remove.
func (s *RequestTransformation) SetRemove(val OptRequestRemoveDetail) {
	s.Remove = val
}

// SetRename sets the value of Rename.
func (s *RequestTransformation) SetRename(val OptRequestRenameDetail) {
	s.Rename = val
}

// SetReplace sets the value of Replace.
func (s *RequestTransformation) SetReplace(val OptResponseModification) {
	s.Replace = val
}

// SetAdd sets the value of Add.
func (s *RequestTransformation) SetAdd(val OptResponseModification) {
	s.Add = val
}

// SetAppend sets the value of Append.
func (s *RequestTransformation) SetAppend(val OptResponseModification) {
	s.Append = val
}

// 許可するJSONのキー<br>半角英数字、ハイフン、アンダースコア、ピリオド繋ぎを許可.
// Ref: #/components/schemas/ResponseAllowDetail
type ResponseAllowDetail struct {
	JsonKeys []JSONKey `json:"jsonKeys"`
}

// GetJsonKeys returns the value of JsonKeys.
func (s *ResponseAllowDetail) GetJsonKeys() []JSONKey {
	return s.JsonKeys
}

// SetJsonKeys sets the value of JsonKeys.
func (s *ResponseAllowDetail) SetJsonKeys(val []JSONKey) {
	s.JsonKeys = val
}

type ResponseHeaderKey string

// Ref: #/components/schemas/ResponseModification
type ResponseModification struct {
	Headers     []ResponseModificationHeadersItem     `json:"headers"`
	QueryParams []ResponseModificationQueryParamsItem `json:"queryParams"`
	Body        []ResponseModificationBodyItem        `json:"body"`
}

// GetHeaders returns the value of Headers.
func (s *ResponseModification) GetHeaders() []ResponseModificationHeadersItem {
	return s.Headers
}

// GetQueryParams returns the value of QueryParams.
func (s *ResponseModification) GetQueryParams() []ResponseModificationQueryParamsItem {
	return s.QueryParams
}

// GetBody returns the value of Body.
func (s *ResponseModification) GetBody() []ResponseModificationBodyItem {
	return s.Body
}

// SetHeaders sets the value of Headers.
func (s *ResponseModification) SetHeaders(val []ResponseModificationHeadersItem) {
	s.Headers = val
}

// SetQueryParams sets the value of QueryParams.
func (s *ResponseModification) SetQueryParams(val []ResponseModificationQueryParamsItem) {
	s.QueryParams = val
}

// SetBody sets the value of Body.
func (s *ResponseModification) SetBody(val []ResponseModificationBodyItem) {
	s.Body = val
}

type ResponseModificationBodyItem struct {
	// 追加するボディのキー.
	Key OptJSONKey `json:"key"`
	// 追加するボディの値.
	Value OptString `json:"value"`
}

// GetKey returns the value of Key.
func (s *ResponseModificationBodyItem) GetKey() OptJSONKey {
	return s.Key
}

// GetValue returns the value of Value.
func (s *ResponseModificationBodyItem) GetValue() OptString {
	return s.Value
}

// SetKey sets the value of Key.
func (s *ResponseModificationBodyItem) SetKey(val OptJSONKey) {
	s.Key = val
}

// SetValue sets the value of Value.
func (s *ResponseModificationBodyItem) SetValue(val OptString) {
	s.Value = val
}

// Ref: #/components/schemas/ResponseModificationDetail
type ResponseModificationDetail struct {
	// 特定のステータスコードの場合に追加する.
	IfStatusCode []int                                   `json:"ifStatusCode"`
	Headers      []ResponseModificationDetailHeadersItem `json:"headers"`
	JSON         []ResponseModificationDetailJSONItem    `json:"json"`
}

// GetIfStatusCode returns the value of IfStatusCode.
func (s *ResponseModificationDetail) GetIfStatusCode() []int {
	return s.IfStatusCode
}

// GetHeaders returns the value of Headers.
func (s *ResponseModificationDetail) GetHeaders() []ResponseModificationDetailHeadersItem {
	return s.Headers
}

// GetJSON returns the value of JSON.
func (s *ResponseModificationDetail) GetJSON() []ResponseModificationDetailJSONItem {
	return s.JSON
}

// SetIfStatusCode sets the value of IfStatusCode.
func (s *ResponseModificationDetail) SetIfStatusCode(val []int) {
	s.IfStatusCode = val
}

// SetHeaders sets the value of Headers.
func (s *ResponseModificationDetail) SetHeaders(val []ResponseModificationDetailHeadersItem) {
	s.Headers = val
}

// SetJSON sets the value of JSON.
func (s *ResponseModificationDetail) SetJSON(val []ResponseModificationDetailJSONItem) {
	s.JSON = val
}

type ResponseModificationDetailHeadersItem struct {
	// 追加するヘッダーのキー.
	Key OptResponseHeaderKey `json:"key"`
	// 追加するヘッダーの値.
	Value OptRequestHeaderValue `json:"value"`
}

// GetKey returns the value of Key.
func (s *ResponseModificationDetailHeadersItem) GetKey() OptResponseHeaderKey {
	return s.Key
}

// GetValue returns the value of Value.
func (s *ResponseModificationDetailHeadersItem) GetValue() OptRequestHeaderValue {
	return s.Value
}

// SetKey sets the value of Key.
func (s *ResponseModificationDetailHeadersItem) SetKey(val OptResponseHeaderKey) {
	s.Key = val
}

// SetValue sets the value of Value.
func (s *ResponseModificationDetailHeadersItem) SetValue(val OptRequestHeaderValue) {
	s.Value = val
}

type ResponseModificationDetailJSONItem struct {
	// 追加するJSONのキー.
	Key OptJSONKey `json:"key"`
	// 追加するJSONの値.
	Value OptString `json:"value"`
}

// GetKey returns the value of Key.
func (s *ResponseModificationDetailJSONItem) GetKey() OptJSONKey {
	return s.Key
}

// GetValue returns the value of Value.
func (s *ResponseModificationDetailJSONItem) GetValue() OptString {
	return s.Value
}

// SetKey sets the value of Key.
func (s *ResponseModificationDetailJSONItem) SetKey(val OptJSONKey) {
	s.Key = val
}

// SetValue sets the value of Value.
func (s *ResponseModificationDetailJSONItem) SetValue(val OptString) {
	s.Value = val
}

type ResponseModificationHeadersItem struct {
	// 追加するヘッダのキー.
	Key OptRequestHeaderKey `json:"key"`
	// 追加するヘッダの値.
	Value OptRequestHeaderValue `json:"value"`
}

// GetKey returns the value of Key.
func (s *ResponseModificationHeadersItem) GetKey() OptRequestHeaderKey {
	return s.Key
}

// GetValue returns the value of Value.
func (s *ResponseModificationHeadersItem) GetValue() OptRequestHeaderValue {
	return s.Value
}

// SetKey sets the value of Key.
func (s *ResponseModificationHeadersItem) SetKey(val OptRequestHeaderKey) {
	s.Key = val
}

// SetValue sets the value of Value.
func (s *ResponseModificationHeadersItem) SetValue(val OptRequestHeaderValue) {
	s.Value = val
}

type ResponseModificationQueryParamsItem struct {
	// 追加するクエリパラメータのキー.
	Key OptQueryParamKey `json:"key"`
	// 追加するクエリパラメータの値.
	Value OptQueryParamValue `json:"value"`
}

// GetKey returns the value of Key.
func (s *ResponseModificationQueryParamsItem) GetKey() OptQueryParamKey {
	return s.Key
}

// GetValue returns the value of Value.
func (s *ResponseModificationQueryParamsItem) GetValue() OptQueryParamValue {
	return s.Value
}

// SetKey sets the value of Key.
func (s *ResponseModificationQueryParamsItem) SetKey(val OptQueryParamKey) {
	s.Key = val
}

// SetValue sets the value of Value.
func (s *ResponseModificationQueryParamsItem) SetValue(val OptQueryParamValue) {
	s.Value = val
}

// Ref: #/components/schemas/ResponseRemoveDetail
type ResponseRemoveDetail struct {
	// 特定のステータスコードの場合に削除する.
	IfStatusCode []int `json:"ifStatusCode"`
	// 削除するヘッダのキー<br>半角英数字、ハイフンのみを許可.
	HeaderKeys []ResponseHeaderKey `json:"headerKeys"`
	// 削除するJSONのキー<br>半角英数字、ハイフン、アンダースコア、ピリオド繋ぎを許可.
	JsonKeys []JSONKey `json:"jsonKeys"`
}

// GetIfStatusCode returns the value of IfStatusCode.
func (s *ResponseRemoveDetail) GetIfStatusCode() []int {
	return s.IfStatusCode
}

// GetHeaderKeys returns the value of HeaderKeys.
func (s *ResponseRemoveDetail) GetHeaderKeys() []ResponseHeaderKey {
	return s.HeaderKeys
}

// GetJsonKeys returns the value of JsonKeys.
func (s *ResponseRemoveDetail) GetJsonKeys() []JSONKey {
	return s.JsonKeys
}

// SetIfStatusCode sets the value of IfStatusCode.
func (s *ResponseRemoveDetail) SetIfStatusCode(val []int) {
	s.IfStatusCode = val
}

// SetHeaderKeys sets the value of HeaderKeys.
func (s *ResponseRemoveDetail) SetHeaderKeys(val []ResponseHeaderKey) {
	s.HeaderKeys = val
}

// SetJsonKeys sets the value of JsonKeys.
func (s *ResponseRemoveDetail) SetJsonKeys(val []JSONKey) {
	s.JsonKeys = val
}

// Ref: #/components/schemas/ResponseRenameDetail
type ResponseRenameDetail struct {
	// 特定のステータスコードの場合にリネームする.
	IfStatusCode []int                             `json:"ifStatusCode"`
	Headers      []ResponseRenameDetailHeadersItem `json:"headers"`
	JSON         []ResponseRenameDetailJSONItem    `json:"json"`
}

// GetIfStatusCode returns the value of IfStatusCode.
func (s *ResponseRenameDetail) GetIfStatusCode() []int {
	return s.IfStatusCode
}

// GetHeaders returns the value of Headers.
func (s *ResponseRenameDetail) GetHeaders() []ResponseRenameDetailHeadersItem {
	return s.Headers
}

// GetJSON returns the value of JSON.
func (s *ResponseRenameDetail) GetJSON() []ResponseRenameDetailJSONItem {
	return s.JSON
}

// SetIfStatusCode sets the value of IfStatusCode.
func (s *ResponseRenameDetail) SetIfStatusCode(val []int) {
	s.IfStatusCode = val
}

// SetHeaders sets the value of Headers.
func (s *ResponseRenameDetail) SetHeaders(val []ResponseRenameDetailHeadersItem) {
	s.Headers = val
}

// SetJSON sets the value of JSON.
func (s *ResponseRenameDetail) SetJSON(val []ResponseRenameDetailJSONItem) {
	s.JSON = val
}

// リネームするヘッダーのキー<br>半角英数字、ハイフンのみを許可.
type ResponseRenameDetailHeadersItem struct {
	From OptResponseHeaderKey `json:"from"`
	To   OptResponseHeaderKey `json:"to"`
}

// GetFrom returns the value of From.
func (s *ResponseRenameDetailHeadersItem) GetFrom() OptResponseHeaderKey {
	return s.From
}

// GetTo returns the value of To.
func (s *ResponseRenameDetailHeadersItem) GetTo() OptResponseHeaderKey {
	return s.To
}

// SetFrom sets the value of From.
func (s *ResponseRenameDetailHeadersItem) SetFrom(val OptResponseHeaderKey) {
	s.From = val
}

// SetTo sets the value of To.
func (s *ResponseRenameDetailHeadersItem) SetTo(val OptResponseHeaderKey) {
	s.To = val
}

type ResponseRenameDetailJSONItem struct {
	// リネームするJSONのキー.
	From OptJSONKey `json:"from"`
	// リネーム後のJSONのキー.
	To OptJSONKey `json:"to"`
}

// GetFrom returns the value of From.
func (s *ResponseRenameDetailJSONItem) GetFrom() OptJSONKey {
	return s.From
}

// GetTo returns the value of To.
func (s *ResponseRenameDetailJSONItem) GetTo() OptJSONKey {
	return s.To
}

// SetFrom sets the value of From.
func (s *ResponseRenameDetailJSONItem) SetFrom(val OptJSONKey) {
	s.From = val
}

// SetTo sets the value of To.
func (s *ResponseRenameDetailJSONItem) SetTo(val OptJSONKey) {
	s.To = val
}

// Ref: #/components/schemas/ResponseReplaceDetail
type ResponseReplaceDetail struct {
	// 特定のステータスコードの場合に置換する.
	IfStatusCode []int                              `json:"ifStatusCode"`
	Headers      []ResponseReplaceDetailHeadersItem `json:"headers"`
	JSON         []ResponseReplaceDetailJSONItem    `json:"json"`
	// 置換するボディ.
	Body OptString `json:"body"`
}

// GetIfStatusCode returns the value of IfStatusCode.
func (s *ResponseReplaceDetail) GetIfStatusCode() []int {
	return s.IfStatusCode
}

// GetHeaders returns the value of Headers.
func (s *ResponseReplaceDetail) GetHeaders() []ResponseReplaceDetailHeadersItem {
	return s.Headers
}

// GetJSON returns the value of JSON.
func (s *ResponseReplaceDetail) GetJSON() []ResponseReplaceDetailJSONItem {
	return s.JSON
}

// GetBody returns the value of Body.
func (s *ResponseReplaceDetail) GetBody() OptString {
	return s.Body
}

// SetIfStatusCode sets the value of IfStatusCode.
func (s *ResponseReplaceDetail) SetIfStatusCode(val []int) {
	s.IfStatusCode = val
}

// SetHeaders sets the value of Headers.
func (s *ResponseReplaceDetail) SetHeaders(val []ResponseReplaceDetailHeadersItem) {
	s.Headers = val
}

// SetJSON sets the value of JSON.
func (s *ResponseReplaceDetail) SetJSON(val []ResponseReplaceDetailJSONItem) {
	s.JSON = val
}

// SetBody sets the value of Body.
func (s *ResponseReplaceDetail) SetBody(val OptString) {
	s.Body = val
}

type ResponseReplaceDetailHeadersItem struct {
	// 置換するヘッダーのキー.
	Key OptResponseHeaderKey `json:"key"`
	// 置換後のヘッダーの値.
	Value OptRequestHeaderValue `json:"value"`
}

// GetKey returns the value of Key.
func (s *ResponseReplaceDetailHeadersItem) GetKey() OptResponseHeaderKey {
	return s.Key
}

// GetValue returns the value of Value.
func (s *ResponseReplaceDetailHeadersItem) GetValue() OptRequestHeaderValue {
	return s.Value
}

// SetKey sets the value of Key.
func (s *ResponseReplaceDetailHeadersItem) SetKey(val OptResponseHeaderKey) {
	s.Key = val
}

// SetValue sets the value of Value.
func (s *ResponseReplaceDetailHeadersItem) SetValue(val OptRequestHeaderValue) {
	s.Value = val
}

type ResponseReplaceDetailJSONItem struct {
	// 置換するJSONのキー.
	Key OptJSONKey `json:"key"`
	// 置換後のJSONの値.
	Value OptString `json:"value"`
}

// GetKey returns the value of Key.
func (s *ResponseReplaceDetailJSONItem) GetKey() OptJSONKey {
	return s.Key
}

// GetValue returns the value of Value.
func (s *ResponseReplaceDetailJSONItem) GetValue() OptString {
	return s.Value
}

// SetKey sets the value of Key.
func (s *ResponseReplaceDetailJSONItem) SetKey(val OptJSONKey) {
	s.Key = val
}

// SetValue sets the value of Value.
func (s *ResponseReplaceDetailJSONItem) SetValue(val OptString) {
	s.Value = val
}

// Ref: #/components/schemas/ResponseTransformation
type ResponseTransformation struct {
	Allow   OptResponseAllowDetail        `json:"allow"`
	Remove  OptResponseRemoveDetail       `json:"remove"`
	Rename  OptResponseRenameDetail       `json:"rename"`
	Replace OptResponseReplaceDetail      `json:"replace"`
	Add     OptResponseModificationDetail `json:"add"`
	Append  OptResponseModificationDetail `json:"append"`
}

// GetAllow returns the value of Allow.
func (s *ResponseTransformation) GetAllow() OptResponseAllowDetail {
	return s.Allow
}

// GetRemove returns the value of Remove.
func (s *ResponseTransformation) GetRemove() OptResponseRemoveDetail {
	return s.Remove
}

// GetRename returns the value of Rename.
func (s *ResponseTransformation) GetRename() OptResponseRenameDetail {
	return s.Rename
}

// GetReplace returns the value of Replace.
func (s *ResponseTransformation) GetReplace() OptResponseReplaceDetail {
	return s.Replace
}

// GetAdd returns the value of Add.
func (s *ResponseTransformation) GetAdd() OptResponseModificationDetail {
	return s.Add
}

// GetAppend returns the value of Append.
func (s *ResponseTransformation) GetAppend() OptResponseModificationDetail {
	return s.Append
}

// SetAllow sets the value of Allow.
func (s *ResponseTransformation) SetAllow(val OptResponseAllowDetail) {
	s.Allow = val
}

// SetRemove sets the value of Remove.
func (s *ResponseTransformation) SetRemove(val OptResponseRemoveDetail) {
	s.Remove = val
}

// SetRename sets the value of Rename.
func (s *ResponseTransformation) SetRename(val OptResponseRenameDetail) {
	s.Rename = val
}

// SetReplace sets the value of Replace.
func (s *ResponseTransformation) SetReplace(val OptResponseReplaceDetail) {
	s.Replace = val
}

// SetAdd sets the value of Add.
func (s *ResponseTransformation) SetAdd(val OptResponseModificationDetail) {
	s.Add = val
}

// SetAppend sets the value of Append.
func (s *ResponseTransformation) SetAppend(val OptResponseModificationDetail) {
	s.Append = val
}

// Ref: #/components/schemas/RouteAuthorization
type RouteAuthorization struct {
	// GroupのEntityを識別するためのID.
	ID OptUUID `json:"id"`
	// Group名 <br>
	// Group名はUnicode文字、数字、ハイフン、アンダースコア、ピリオド、チルダのみ許可.
	Name OptName `json:"name"`
	// Groupの認可設定が有効かどうか.
	Enabled OptBool `json:"enabled"`
}

// GetID returns the value of ID.
func (s *RouteAuthorization) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *RouteAuthorization) GetName() OptName {
	return s.Name
}

// GetEnabled returns the value of Enabled.
func (s *RouteAuthorization) GetEnabled() OptBool {
	return s.Enabled
}

// SetID sets the value of ID.
func (s *RouteAuthorization) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *RouteAuthorization) SetName(val OptName) {
	s.Name = val
}

// SetEnabled sets the value of Enabled.
func (s *RouteAuthorization) SetEnabled(val OptBool) {
	s.Enabled = val
}

// Ref: #/components/schemas/RouteAuthorizationDetail
type RouteAuthorizationDetail struct {
	OneOf RouteAuthorizationDetailSum
}

// GetOneOf returns the value of OneOf.
func (s *RouteAuthorizationDetail) GetOneOf() RouteAuthorizationDetailSum {
	return s.OneOf
}

// SetOneOf sets the value of OneOf.
func (s *RouteAuthorizationDetail) SetOneOf(val RouteAuthorizationDetailSum) {
	s.OneOf = val
}

// RouteAuthorizationDetailSum represents sum type.
type RouteAuthorizationDetailSum struct {
	Type                         RouteAuthorizationDetailSumType // switch on this field
	RouteAuthorizationDetailSum0 RouteAuthorizationDetailSum0
	RouteAuthorizationDetailSum1 RouteAuthorizationDetailSum1
}

// RouteAuthorizationDetailSumType is oneOf type of RouteAuthorizationDetailSum.
type RouteAuthorizationDetailSumType string

// Possible values for RouteAuthorizationDetailSumType.
const (
	RouteAuthorizationDetailSum0RouteAuthorizationDetailSum RouteAuthorizationDetailSumType = "RouteAuthorizationDetailSum0"
	RouteAuthorizationDetailSum1RouteAuthorizationDetailSum RouteAuthorizationDetailSumType = "RouteAuthorizationDetailSum1"
)

// IsRouteAuthorizationDetailSum0 reports whether RouteAuthorizationDetailSum is RouteAuthorizationDetailSum0.
func (s RouteAuthorizationDetailSum) IsRouteAuthorizationDetailSum0() bool {
	return s.Type == RouteAuthorizationDetailSum0RouteAuthorizationDetailSum
}

// IsRouteAuthorizationDetailSum1 reports whether RouteAuthorizationDetailSum is RouteAuthorizationDetailSum1.
func (s RouteAuthorizationDetailSum) IsRouteAuthorizationDetailSum1() bool {
	return s.Type == RouteAuthorizationDetailSum1RouteAuthorizationDetailSum
}

// SetRouteAuthorizationDetailSum0 sets RouteAuthorizationDetailSum to RouteAuthorizationDetailSum0.
func (s *RouteAuthorizationDetailSum) SetRouteAuthorizationDetailSum0(v RouteAuthorizationDetailSum0) {
	s.Type = RouteAuthorizationDetailSum0RouteAuthorizationDetailSum
	s.RouteAuthorizationDetailSum0 = v
}

// GetRouteAuthorizationDetailSum0 returns RouteAuthorizationDetailSum0 and true boolean if RouteAuthorizationDetailSum is RouteAuthorizationDetailSum0.
func (s RouteAuthorizationDetailSum) GetRouteAuthorizationDetailSum0() (v RouteAuthorizationDetailSum0, ok bool) {
	if !s.IsRouteAuthorizationDetailSum0() {
		return v, false
	}
	return s.RouteAuthorizationDetailSum0, true
}

// NewRouteAuthorizationDetailSum0RouteAuthorizationDetailSum returns new RouteAuthorizationDetailSum from RouteAuthorizationDetailSum0.
func NewRouteAuthorizationDetailSum0RouteAuthorizationDetailSum(v RouteAuthorizationDetailSum0) RouteAuthorizationDetailSum {
	var s RouteAuthorizationDetailSum
	s.SetRouteAuthorizationDetailSum0(v)
	return s
}

// SetRouteAuthorizationDetailSum1 sets RouteAuthorizationDetailSum to RouteAuthorizationDetailSum1.
func (s *RouteAuthorizationDetailSum) SetRouteAuthorizationDetailSum1(v RouteAuthorizationDetailSum1) {
	s.Type = RouteAuthorizationDetailSum1RouteAuthorizationDetailSum
	s.RouteAuthorizationDetailSum1 = v
}

// GetRouteAuthorizationDetailSum1 returns RouteAuthorizationDetailSum1 and true boolean if RouteAuthorizationDetailSum is RouteAuthorizationDetailSum1.
func (s RouteAuthorizationDetailSum) GetRouteAuthorizationDetailSum1() (v RouteAuthorizationDetailSum1, ok bool) {
	if !s.IsRouteAuthorizationDetailSum1() {
		return v, false
	}
	return s.RouteAuthorizationDetailSum1, true
}

// NewRouteAuthorizationDetailSum1RouteAuthorizationDetailSum returns new RouteAuthorizationDetailSum from RouteAuthorizationDetailSum1.
func NewRouteAuthorizationDetailSum1RouteAuthorizationDetailSum(v RouteAuthorizationDetailSum1) RouteAuthorizationDetailSum {
	var s RouteAuthorizationDetailSum
	s.SetRouteAuthorizationDetailSum1(v)
	return s
}

type RouteAuthorizationDetailSum0 struct {
	// 認可設定を無効にする.
	IsACLEnabled RouteAuthorizationDetailSum0IsACLEnabled `json:"isACLEnabled"`
}

// GetIsACLEnabled returns the value of IsACLEnabled.
func (s *RouteAuthorizationDetailSum0) GetIsACLEnabled() RouteAuthorizationDetailSum0IsACLEnabled {
	return s.IsACLEnabled
}

// SetIsACLEnabled sets the value of IsACLEnabled.
func (s *RouteAuthorizationDetailSum0) SetIsACLEnabled(val RouteAuthorizationDetailSum0IsACLEnabled) {
	s.IsACLEnabled = val
}

// 認可設定を無効にする.
type RouteAuthorizationDetailSum0IsACLEnabled bool

const (
	RouteAuthorizationDetailSum0IsACLEnabledFalse RouteAuthorizationDetailSum0IsACLEnabled = false
)

// AllValues returns all RouteAuthorizationDetailSum0IsACLEnabled values.
func (RouteAuthorizationDetailSum0IsACLEnabled) AllValues() []RouteAuthorizationDetailSum0IsACLEnabled {
	return []RouteAuthorizationDetailSum0IsACLEnabled{
		RouteAuthorizationDetailSum0IsACLEnabledFalse,
	}
}

type RouteAuthorizationDetailSum1 struct {
	// 認可設定を有効にする.
	IsACLEnabled RouteAuthorizationDetailSum1IsACLEnabled `json:"isACLEnabled"`
	// 認可するGroupのリスト.
	Groups []RouteAuthorization `json:"groups"`
}

// GetIsACLEnabled returns the value of IsACLEnabled.
func (s *RouteAuthorizationDetailSum1) GetIsACLEnabled() RouteAuthorizationDetailSum1IsACLEnabled {
	return s.IsACLEnabled
}

// GetGroups returns the value of Groups.
func (s *RouteAuthorizationDetailSum1) GetGroups() []RouteAuthorization {
	return s.Groups
}

// SetIsACLEnabled sets the value of IsACLEnabled.
func (s *RouteAuthorizationDetailSum1) SetIsACLEnabled(val RouteAuthorizationDetailSum1IsACLEnabled) {
	s.IsACLEnabled = val
}

// SetGroups sets the value of Groups.
func (s *RouteAuthorizationDetailSum1) SetGroups(val []RouteAuthorization) {
	s.Groups = val
}

// 認可設定を有効にする.
type RouteAuthorizationDetailSum1IsACLEnabled bool

const (
	RouteAuthorizationDetailSum1IsACLEnabledTrue RouteAuthorizationDetailSum1IsACLEnabled = true
)

// AllValues returns all RouteAuthorizationDetailSum1IsACLEnabled values.
func (RouteAuthorizationDetailSum1IsACLEnabled) AllValues() []RouteAuthorizationDetailSum1IsACLEnabled {
	return []RouteAuthorizationDetailSum1IsACLEnabled{
		RouteAuthorizationDetailSum1IsACLEnabledTrue,
	}
}

// Merged schema.
// Ref: #/components/schemas/RouteDetail
type RouteDetail struct {
	// Entityを識別するためのID.
	ID OptUUID `json:"id"`
	// 作成日時.
	CreatedAt OptDateTime `json:"createdAt"`
	// 更新日時.
	UpdatedAt OptDateTime `json:"updatedAt"`
	ServiceId OptUUID     `json:"serviceId"`
	Name      OptName     `json:"name"`
	// Routeを検索するためのタグ.
	Tags Tags `json:"tags"`
	// Routeにアクセスするためのプロトコル.
	Protocols OptRouteDetailProtocols `json:"protocols"`
	// Routeにアクセスするためのパス<br>パスはスラッシュまたはチルダスラッシュで始まるパス文字列のみを許可.
	Path OptString `json:"path"`
	// 自動発行されたホスト<br>hostsに値が設定されていない場合に有効.
	Host OptString `json:"host"`
	// ホスト名<br>自動発行されたホストまたは設定したドメインを指定する<br>自動発行されたホストはService詳細照会APIで確認できる<br>作成したドメインはDomain一覧照会APIで確認できる.
	Hosts []string `json:"hosts"`
	// RouteにアクセスするためのHTTPメソッド<br>未指定の場合は全メソッドを許可.
	Methods []HTTPMethod `json:"methods"`
	// HTTPSリダイレクト時のステータスコード.
	HttpsRedirectStatusCode OptRouteDetailHttpsRedirectStatusCode `json:"httpsRedirectStatusCode"`
	// パスを正規表現で指定した場合の優先度<br>0が最優先.
	RegexPriority OptInt `json:"regexPriority"`
	// リクエストのパスからルートのパスを削除するかどうか.
	StripPath OptBool `json:"stripPath"`
	// リクエストのHostヘッダーを保持するかどうか.
	PreserveHost OptBool `json:"preserveHost"`
	// リクエストのバッファリングを有効にするかどうか.
	RequestBuffering OptBool `json:"requestBuffering"`
	// レスポンスのバッファリングを有効にするかどうか.
	ResponseBuffering   OptBool `json:"responseBuffering"`
	IpRestrictionConfig jx.Raw  `json:"ipRestrictionConfig"`
}

// GetID returns the value of ID.
func (s *RouteDetail) GetID() OptUUID {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *RouteDetail) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *RouteDetail) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetServiceId returns the value of ServiceId.
func (s *RouteDetail) GetServiceId() OptUUID {
	return s.ServiceId
}

// GetName returns the value of Name.
func (s *RouteDetail) GetName() OptName {
	return s.Name
}

// GetTags returns the value of Tags.
func (s *RouteDetail) GetTags() Tags {
	return s.Tags
}

// GetProtocols returns the value of Protocols.
func (s *RouteDetail) GetProtocols() OptRouteDetailProtocols {
	return s.Protocols
}

// GetPath returns the value of Path.
func (s *RouteDetail) GetPath() OptString {
	return s.Path
}

// GetHost returns the value of Host.
func (s *RouteDetail) GetHost() OptString {
	return s.Host
}

// GetHosts returns the value of Hosts.
func (s *RouteDetail) GetHosts() []string {
	return s.Hosts
}

// GetMethods returns the value of Methods.
func (s *RouteDetail) GetMethods() []HTTPMethod {
	return s.Methods
}

// GetHttpsRedirectStatusCode returns the value of HttpsRedirectStatusCode.
func (s *RouteDetail) GetHttpsRedirectStatusCode() OptRouteDetailHttpsRedirectStatusCode {
	return s.HttpsRedirectStatusCode
}

// GetRegexPriority returns the value of RegexPriority.
func (s *RouteDetail) GetRegexPriority() OptInt {
	return s.RegexPriority
}

// GetStripPath returns the value of StripPath.
func (s *RouteDetail) GetStripPath() OptBool {
	return s.StripPath
}

// GetPreserveHost returns the value of PreserveHost.
func (s *RouteDetail) GetPreserveHost() OptBool {
	return s.PreserveHost
}

// GetRequestBuffering returns the value of RequestBuffering.
func (s *RouteDetail) GetRequestBuffering() OptBool {
	return s.RequestBuffering
}

// GetResponseBuffering returns the value of ResponseBuffering.
func (s *RouteDetail) GetResponseBuffering() OptBool {
	return s.ResponseBuffering
}

// GetIpRestrictionConfig returns the value of IpRestrictionConfig.
func (s *RouteDetail) GetIpRestrictionConfig() jx.Raw {
	return s.IpRestrictionConfig
}

// SetID sets the value of ID.
func (s *RouteDetail) SetID(val OptUUID) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *RouteDetail) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *RouteDetail) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetServiceId sets the value of ServiceId.
func (s *RouteDetail) SetServiceId(val OptUUID) {
	s.ServiceId = val
}

// SetName sets the value of Name.
func (s *RouteDetail) SetName(val OptName) {
	s.Name = val
}

// SetTags sets the value of Tags.
func (s *RouteDetail) SetTags(val Tags) {
	s.Tags = val
}

// SetProtocols sets the value of Protocols.
func (s *RouteDetail) SetProtocols(val OptRouteDetailProtocols) {
	s.Protocols = val
}

// SetPath sets the value of Path.
func (s *RouteDetail) SetPath(val OptString) {
	s.Path = val
}

// SetHost sets the value of Host.
func (s *RouteDetail) SetHost(val OptString) {
	s.Host = val
}

// SetHosts sets the value of Hosts.
func (s *RouteDetail) SetHosts(val []string) {
	s.Hosts = val
}

// SetMethods sets the value of Methods.
func (s *RouteDetail) SetMethods(val []HTTPMethod) {
	s.Methods = val
}

// SetHttpsRedirectStatusCode sets the value of HttpsRedirectStatusCode.
func (s *RouteDetail) SetHttpsRedirectStatusCode(val OptRouteDetailHttpsRedirectStatusCode) {
	s.HttpsRedirectStatusCode = val
}

// SetRegexPriority sets the value of RegexPriority.
func (s *RouteDetail) SetRegexPriority(val OptInt) {
	s.RegexPriority = val
}

// SetStripPath sets the value of StripPath.
func (s *RouteDetail) SetStripPath(val OptBool) {
	s.StripPath = val
}

// SetPreserveHost sets the value of PreserveHost.
func (s *RouteDetail) SetPreserveHost(val OptBool) {
	s.PreserveHost = val
}

// SetRequestBuffering sets the value of RequestBuffering.
func (s *RouteDetail) SetRequestBuffering(val OptBool) {
	s.RequestBuffering = val
}

// SetResponseBuffering sets the value of ResponseBuffering.
func (s *RouteDetail) SetResponseBuffering(val OptBool) {
	s.ResponseBuffering = val
}

// SetIpRestrictionConfig sets the value of IpRestrictionConfig.
func (s *RouteDetail) SetIpRestrictionConfig(val jx.Raw) {
	s.IpRestrictionConfig = val
}

// HTTPSリダイレクト時のステータスコード.
type RouteDetailHttpsRedirectStatusCode int

const (
	RouteDetailHttpsRedirectStatusCode301 RouteDetailHttpsRedirectStatusCode = 301
	RouteDetailHttpsRedirectStatusCode302 RouteDetailHttpsRedirectStatusCode = 302
	RouteDetailHttpsRedirectStatusCode303 RouteDetailHttpsRedirectStatusCode = 303
	RouteDetailHttpsRedirectStatusCode307 RouteDetailHttpsRedirectStatusCode = 307
	RouteDetailHttpsRedirectStatusCode308 RouteDetailHttpsRedirectStatusCode = 308
	RouteDetailHttpsRedirectStatusCode426 RouteDetailHttpsRedirectStatusCode = 426
)

// AllValues returns all RouteDetailHttpsRedirectStatusCode values.
func (RouteDetailHttpsRedirectStatusCode) AllValues() []RouteDetailHttpsRedirectStatusCode {
	return []RouteDetailHttpsRedirectStatusCode{
		RouteDetailHttpsRedirectStatusCode301,
		RouteDetailHttpsRedirectStatusCode302,
		RouteDetailHttpsRedirectStatusCode303,
		RouteDetailHttpsRedirectStatusCode307,
		RouteDetailHttpsRedirectStatusCode308,
		RouteDetailHttpsRedirectStatusCode426,
	}
}

// Routeにアクセスするためのプロトコル.
type RouteDetailProtocols string

const (
	RouteDetailProtocolsHTTPHTTPS RouteDetailProtocols = "http,https"
	RouteDetailProtocolsHTTP      RouteDetailProtocols = "http"
	RouteDetailProtocolsHTTPS     RouteDetailProtocols = "https"
)

// AllValues returns all RouteDetailProtocols values.
func (RouteDetailProtocols) AllValues() []RouteDetailProtocols {
	return []RouteDetailProtocols{
		RouteDetailProtocolsHTTPHTTPS,
		RouteDetailProtocolsHTTP,
		RouteDetailProtocolsHTTPS,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RouteDetailProtocols) MarshalText() ([]byte, error) {
	switch s {
	case RouteDetailProtocolsHTTPHTTPS:
		return []byte(s), nil
	case RouteDetailProtocolsHTTP:
		return []byte(s), nil
	case RouteDetailProtocolsHTTPS:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RouteDetailProtocols) UnmarshalText(data []byte) error {
	switch RouteDetailProtocols(data) {
	case RouteDetailProtocolsHTTPHTTPS:
		*s = RouteDetailProtocolsHTTPHTTPS
		return nil
	case RouteDetailProtocolsHTTP:
		*s = RouteDetailProtocolsHTTP
		return nil
	case RouteDetailProtocolsHTTPS:
		*s = RouteDetailProtocolsHTTPS
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/ServiceDetail
type ServiceDetail struct {
	// Entityを識別するためのID.
	ID OptUUID `json:"id"`
	// 作成日時.
	CreatedAt OptDateTime `json:"createdAt"`
	// 更新日時.
	UpdatedAt OptDateTime `json:"updatedAt"`
	// Service名<br>Service名は半角英数字およびアンダースコアのみを許可.
	Name Name `json:"name"`
	// Serviceを検索するためのタグ.
	Tags Tags `json:"tags"`
	// Serviceにアクセスするためのプロトコル.
	Protocol ServiceDetailProtocol `json:"protocol"`
	// Serviceにアクセスするためのホスト名<br>ホスト名はドメイン名またはIPアドレスを指定する<br>プライベート/ループバックIPアドレスは指定できない.
	Host string `json:"host"`
	// Serviceにアクセスするためのパス<br>パスは/から始まり、半角英数字、アンダースコア、ハイフン、スラッシュのみを許可.
	Path OptString `json:"path"`
	// Serviceにアクセスするためのポート番号<br>省略した場合はプロトコルに応じたデフォルトポートが設定される.
	Port OptInt `json:"port"`
	// リトライ回数.
	Retries OptInt `json:"retries"`
	// 接続タイムアウト秒数.
	ConnectTimeout OptInt `json:"connectTimeout"`
	// 書き込みタイムアウト秒数.
	WriteTimeout OptInt `json:"writeTimeout"`
	// 読み込みタイムアウト秒数.
	ReadTimeout OptInt `json:"readTimeout"`
	// 認証方式<br>未指定の場合は認証なし.
	Authentication OptServiceDetailAuthentication `json:"authentication"`
	Oidc           jx.Raw                         `json:"oidc"`
	// 自動発行したRouteのホスト.
	RouteHost  OptString `json:"routeHost"`
	CorsConfig jx.Raw    `json:"corsConfig"`
}

// GetID returns the value of ID.
func (s *ServiceDetail) GetID() OptUUID {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ServiceDetail) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ServiceDetail) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *ServiceDetail) GetName() Name {
	return s.Name
}

// GetTags returns the value of Tags.
func (s *ServiceDetail) GetTags() Tags {
	return s.Tags
}

// GetProtocol returns the value of Protocol.
func (s *ServiceDetail) GetProtocol() ServiceDetailProtocol {
	return s.Protocol
}

// GetHost returns the value of Host.
func (s *ServiceDetail) GetHost() string {
	return s.Host
}

// GetPath returns the value of Path.
func (s *ServiceDetail) GetPath() OptString {
	return s.Path
}

// GetPort returns the value of Port.
func (s *ServiceDetail) GetPort() OptInt {
	return s.Port
}

// GetRetries returns the value of Retries.
func (s *ServiceDetail) GetRetries() OptInt {
	return s.Retries
}

// GetConnectTimeout returns the value of ConnectTimeout.
func (s *ServiceDetail) GetConnectTimeout() OptInt {
	return s.ConnectTimeout
}

// GetWriteTimeout returns the value of WriteTimeout.
func (s *ServiceDetail) GetWriteTimeout() OptInt {
	return s.WriteTimeout
}

// GetReadTimeout returns the value of ReadTimeout.
func (s *ServiceDetail) GetReadTimeout() OptInt {
	return s.ReadTimeout
}

// GetAuthentication returns the value of Authentication.
func (s *ServiceDetail) GetAuthentication() OptServiceDetailAuthentication {
	return s.Authentication
}

// GetOidc returns the value of Oidc.
func (s *ServiceDetail) GetOidc() jx.Raw {
	return s.Oidc
}

// GetRouteHost returns the value of RouteHost.
func (s *ServiceDetail) GetRouteHost() OptString {
	return s.RouteHost
}

// GetCorsConfig returns the value of CorsConfig.
func (s *ServiceDetail) GetCorsConfig() jx.Raw {
	return s.CorsConfig
}

// SetID sets the value of ID.
func (s *ServiceDetail) SetID(val OptUUID) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ServiceDetail) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ServiceDetail) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *ServiceDetail) SetName(val Name) {
	s.Name = val
}

// SetTags sets the value of Tags.
func (s *ServiceDetail) SetTags(val Tags) {
	s.Tags = val
}

// SetProtocol sets the value of Protocol.
func (s *ServiceDetail) SetProtocol(val ServiceDetailProtocol) {
	s.Protocol = val
}

// SetHost sets the value of Host.
func (s *ServiceDetail) SetHost(val string) {
	s.Host = val
}

// SetPath sets the value of Path.
func (s *ServiceDetail) SetPath(val OptString) {
	s.Path = val
}

// SetPort sets the value of Port.
func (s *ServiceDetail) SetPort(val OptInt) {
	s.Port = val
}

// SetRetries sets the value of Retries.
func (s *ServiceDetail) SetRetries(val OptInt) {
	s.Retries = val
}

// SetConnectTimeout sets the value of ConnectTimeout.
func (s *ServiceDetail) SetConnectTimeout(val OptInt) {
	s.ConnectTimeout = val
}

// SetWriteTimeout sets the value of WriteTimeout.
func (s *ServiceDetail) SetWriteTimeout(val OptInt) {
	s.WriteTimeout = val
}

// SetReadTimeout sets the value of ReadTimeout.
func (s *ServiceDetail) SetReadTimeout(val OptInt) {
	s.ReadTimeout = val
}

// SetAuthentication sets the value of Authentication.
func (s *ServiceDetail) SetAuthentication(val OptServiceDetailAuthentication) {
	s.Authentication = val
}

// SetOidc sets the value of Oidc.
func (s *ServiceDetail) SetOidc(val jx.Raw) {
	s.Oidc = val
}

// SetRouteHost sets the value of RouteHost.
func (s *ServiceDetail) SetRouteHost(val OptString) {
	s.RouteHost = val
}

// SetCorsConfig sets the value of CorsConfig.
func (s *ServiceDetail) SetCorsConfig(val jx.Raw) {
	s.CorsConfig = val
}

// 認証方式<br>未指定の場合は認証なし.
type ServiceDetailAuthentication string

const (
	ServiceDetailAuthenticationNone  ServiceDetailAuthentication = "none"
	ServiceDetailAuthenticationBasic ServiceDetailAuthentication = "basic"
	ServiceDetailAuthenticationHmac  ServiceDetailAuthentication = "hmac"
	ServiceDetailAuthenticationJwt   ServiceDetailAuthentication = "jwt"
	ServiceDetailAuthenticationOidc  ServiceDetailAuthentication = "oidc"
)

// AllValues returns all ServiceDetailAuthentication values.
func (ServiceDetailAuthentication) AllValues() []ServiceDetailAuthentication {
	return []ServiceDetailAuthentication{
		ServiceDetailAuthenticationNone,
		ServiceDetailAuthenticationBasic,
		ServiceDetailAuthenticationHmac,
		ServiceDetailAuthenticationJwt,
		ServiceDetailAuthenticationOidc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ServiceDetailAuthentication) MarshalText() ([]byte, error) {
	switch s {
	case ServiceDetailAuthenticationNone:
		return []byte(s), nil
	case ServiceDetailAuthenticationBasic:
		return []byte(s), nil
	case ServiceDetailAuthenticationHmac:
		return []byte(s), nil
	case ServiceDetailAuthenticationJwt:
		return []byte(s), nil
	case ServiceDetailAuthenticationOidc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ServiceDetailAuthentication) UnmarshalText(data []byte) error {
	switch ServiceDetailAuthentication(data) {
	case ServiceDetailAuthenticationNone:
		*s = ServiceDetailAuthenticationNone
		return nil
	case ServiceDetailAuthenticationBasic:
		*s = ServiceDetailAuthenticationBasic
		return nil
	case ServiceDetailAuthenticationHmac:
		*s = ServiceDetailAuthenticationHmac
		return nil
	case ServiceDetailAuthenticationJwt:
		*s = ServiceDetailAuthenticationJwt
		return nil
	case ServiceDetailAuthenticationOidc:
		*s = ServiceDetailAuthenticationOidc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Serviceにアクセスするためのプロトコル.
type ServiceDetailProtocol string

const (
	ServiceDetailProtocolHTTP  ServiceDetailProtocol = "http"
	ServiceDetailProtocolHTTPS ServiceDetailProtocol = "https"
)

// AllValues returns all ServiceDetailProtocol values.
func (ServiceDetailProtocol) AllValues() []ServiceDetailProtocol {
	return []ServiceDetailProtocol{
		ServiceDetailProtocolHTTP,
		ServiceDetailProtocolHTTPS,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ServiceDetailProtocol) MarshalText() ([]byte, error) {
	switch s {
	case ServiceDetailProtocolHTTP:
		return []byte(s), nil
	case ServiceDetailProtocolHTTPS:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ServiceDetailProtocol) UnmarshalText(data []byte) error {
	switch ServiceDetailProtocol(data) {
	case ServiceDetailProtocolHTTP:
		*s = ServiceDetailProtocolHTTP
		return nil
	case ServiceDetailProtocolHTTPS:
		*s = ServiceDetailProtocolHTTPS
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SubscribeBadRequest ErrorSchema

func (*SubscribeBadRequest) subscribeRes() {}

type SubscribeInternalServerError ErrorSchema

func (*SubscribeInternalServerError) subscribeRes() {}

// SubscribeNoContent is response for Subscribe operation.
type SubscribeNoContent struct{}

func (*SubscribeNoContent) subscribeRes() {}

type SubscribeUnauthorized ErrorSchema

func (*SubscribeUnauthorized) subscribeRes() {}

// Ref: #/components/schemas/Subscribed
type Subscribed struct {
	// 契約時にとるSubscriptionStatusの状態.
	Status OptSubscribedStatus `json:"status"`
	// アカウントを識別するためのID.
	ResourceId OptInt64 `json:"resourceId"`
	Plan       OptPlan  `json:"plan"`
}

// GetStatus returns the value of Status.
func (s *Subscribed) GetStatus() OptSubscribedStatus {
	return s.Status
}

// GetResourceId returns the value of ResourceId.
func (s *Subscribed) GetResourceId() OptInt64 {
	return s.ResourceId
}

// GetPlan returns the value of Plan.
func (s *Subscribed) GetPlan() OptPlan {
	return s.Plan
}

// SetStatus sets the value of Status.
func (s *Subscribed) SetStatus(val OptSubscribedStatus) {
	s.Status = val
}

// SetResourceId sets the value of ResourceId.
func (s *Subscribed) SetResourceId(val OptInt64) {
	s.ResourceId = val
}

// SetPlan sets the value of Plan.
func (s *Subscribed) SetPlan(val OptPlan) {
	s.Plan = val
}

// 契約時にとるSubscriptionStatusの状態.
type SubscribedStatus string

const (
	SubscribedStatusActive   SubscribedStatus = "active"
	SubscribedStatusInactive SubscribedStatus = "inactive"
	SubscribedStatusExpired  SubscribedStatus = "expired"
)

// AllValues returns all SubscribedStatus values.
func (SubscribedStatus) AllValues() []SubscribedStatus {
	return []SubscribedStatus{
		SubscribedStatusActive,
		SubscribedStatusInactive,
		SubscribedStatusExpired,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubscribedStatus) MarshalText() ([]byte, error) {
	switch s {
	case SubscribedStatusActive:
		return []byte(s), nil
	case SubscribedStatusInactive:
		return []byte(s), nil
	case SubscribedStatusExpired:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubscribedStatus) UnmarshalText(data []byte) error {
	switch SubscribedStatus(data) {
	case SubscribedStatusActive:
		*s = SubscribedStatusActive
		return nil
	case SubscribedStatusInactive:
		*s = SubscribedStatusInactive
		return nil
	case SubscribedStatusExpired:
		*s = SubscribedStatusExpired
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 契約情報.
// Ref: #/components/schemas/SubscriptionOption
type SubscriptionOption struct {
	// プランID.
	PlanId OptUUID `json:"planId"`
}

// GetPlanId returns the value of PlanId.
func (s *SubscriptionOption) GetPlanId() OptUUID {
	return s.PlanId
}

// SetPlanId sets the value of PlanId.
func (s *SubscriptionOption) SetPlanId(val OptUUID) {
	s.PlanId = val
}

// 契約状態.
// Ref: #/components/schemas/SubscriptionStatus
type SubscriptionStatus struct {
	OneOf SubscriptionStatusSum
}

// GetOneOf returns the value of OneOf.
func (s *SubscriptionStatus) GetOneOf() SubscriptionStatusSum {
	return s.OneOf
}

// SetOneOf sets the value of OneOf.
func (s *SubscriptionStatus) SetOneOf(val SubscriptionStatusSum) {
	s.OneOf = val
}

// SubscriptionStatusSum represents sum type.
type SubscriptionStatusSum struct {
	Type         SubscriptionStatusSumType // switch on this field
	Unsubscribed Unsubscribed
	Subscribed   Subscribed
}

// SubscriptionStatusSumType is oneOf type of SubscriptionStatusSum.
type SubscriptionStatusSumType string

// Possible values for SubscriptionStatusSumType.
const (
	UnsubscribedSubscriptionStatusSum SubscriptionStatusSumType = "Unsubscribed"
	SubscribedSubscriptionStatusSum   SubscriptionStatusSumType = "Subscribed"
)

// IsUnsubscribed reports whether SubscriptionStatusSum is Unsubscribed.
func (s SubscriptionStatusSum) IsUnsubscribed() bool {
	return s.Type == UnsubscribedSubscriptionStatusSum
}

// IsSubscribed reports whether SubscriptionStatusSum is Subscribed.
func (s SubscriptionStatusSum) IsSubscribed() bool { return s.Type == SubscribedSubscriptionStatusSum }

// SetUnsubscribed sets SubscriptionStatusSum to Unsubscribed.
func (s *SubscriptionStatusSum) SetUnsubscribed(v Unsubscribed) {
	s.Type = UnsubscribedSubscriptionStatusSum
	s.Unsubscribed = v
}

// GetUnsubscribed returns Unsubscribed and true boolean if SubscriptionStatusSum is Unsubscribed.
func (s SubscriptionStatusSum) GetUnsubscribed() (v Unsubscribed, ok bool) {
	if !s.IsUnsubscribed() {
		return v, false
	}
	return s.Unsubscribed, true
}

// NewUnsubscribedSubscriptionStatusSum returns new SubscriptionStatusSum from Unsubscribed.
func NewUnsubscribedSubscriptionStatusSum(v Unsubscribed) SubscriptionStatusSum {
	var s SubscriptionStatusSum
	s.SetUnsubscribed(v)
	return s
}

// SetSubscribed sets SubscriptionStatusSum to Subscribed.
func (s *SubscriptionStatusSum) SetSubscribed(v Subscribed) {
	s.Type = SubscribedSubscriptionStatusSum
	s.Subscribed = v
}

// GetSubscribed returns Subscribed and true boolean if SubscriptionStatusSum is Subscribed.
func (s SubscriptionStatusSum) GetSubscribed() (v Subscribed, ok bool) {
	if !s.IsSubscribed() {
		return v, false
	}
	return s.Subscribed, true
}

// NewSubscribedSubscriptionStatusSum returns new SubscriptionStatusSum from Subscribed.
func NewSubscribedSubscriptionStatusSum(v Subscribed) SubscriptionStatusSum {
	var s SubscriptionStatusSum
	s.SetSubscribed(v)
	return s
}

type Tags []string

type UnsubscribeBadRequest ErrorSchema

func (*UnsubscribeBadRequest) unsubscribeRes() {}

type UnsubscribeInternalServerError ErrorSchema

func (*UnsubscribeInternalServerError) unsubscribeRes() {}

// UnsubscribeNoContent is response for Unsubscribe operation.
type UnsubscribeNoContent struct{}

func (*UnsubscribeNoContent) unsubscribeRes() {}

type UnsubscribeNotFound ErrorSchema

func (*UnsubscribeNotFound) unsubscribeRes() {}

// Ref: #/components/schemas/Unsubscribed
type Unsubscribed struct {
	// 未契約時にとるSubscriptionStatusの状態.
	Status OptUnsubscribedStatus `json:"status"`
}

// GetStatus returns the value of Status.
func (s *Unsubscribed) GetStatus() OptUnsubscribedStatus {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *Unsubscribed) SetStatus(val OptUnsubscribedStatus) {
	s.Status = val
}

// 未契約時にとるSubscriptionStatusの状態.
type UnsubscribedStatus string

const (
	UnsubscribedStatusUnsubscribed UnsubscribedStatus = "unsubscribed"
)

// AllValues returns all UnsubscribedStatus values.
func (UnsubscribedStatus) AllValues() []UnsubscribedStatus {
	return []UnsubscribedStatus{
		UnsubscribedStatusUnsubscribed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UnsubscribedStatus) MarshalText() ([]byte, error) {
	switch s {
	case UnsubscribedStatusUnsubscribed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UnsubscribedStatus) UnmarshalText(data []byte) error {
	switch UnsubscribedStatus(data) {
	case UnsubscribedStatusUnsubscribed:
		*s = UnsubscribedStatusUnsubscribed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateCertificateBadRequest ErrorSchema

func (*UpdateCertificateBadRequest) updateCertificateRes() {}

type UpdateCertificateConflict ErrorSchema

func (*UpdateCertificateConflict) updateCertificateRes() {}

type UpdateCertificateInternalServerError ErrorSchema

func (*UpdateCertificateInternalServerError) updateCertificateRes() {}

// UpdateCertificateNoContent is response for UpdateCertificate operation.
type UpdateCertificateNoContent struct{}

func (*UpdateCertificateNoContent) updateCertificateRes() {}

type UpdateCertificateNotFound ErrorSchema

func (*UpdateCertificateNotFound) updateCertificateRes() {}

type UpdateCertificateUnauthorized ErrorSchema

func (*UpdateCertificateUnauthorized) updateCertificateRes() {}

type UpdateCertificateUnprocessableEntity ErrorSchema

func (*UpdateCertificateUnprocessableEntity) updateCertificateRes() {}

type UpdateDomainBadRequest ErrorSchema

func (*UpdateDomainBadRequest) updateDomainRes() {}

type UpdateDomainConflict ErrorSchema

func (*UpdateDomainConflict) updateDomainRes() {}

type UpdateDomainInternalServerError ErrorSchema

func (*UpdateDomainInternalServerError) updateDomainRes() {}

// UpdateDomainNoContent is response for UpdateDomain operation.
type UpdateDomainNoContent struct{}

func (*UpdateDomainNoContent) updateDomainRes() {}

type UpdateDomainNotFound ErrorSchema

func (*UpdateDomainNotFound) updateDomainRes() {}

type UpdateDomainUnauthorized ErrorSchema

func (*UpdateDomainUnauthorized) updateDomainRes() {}

type UpdateGroupBadRequest ErrorSchema

func (*UpdateGroupBadRequest) updateGroupRes() {}

type UpdateGroupConflict ErrorSchema

func (*UpdateGroupConflict) updateGroupRes() {}

type UpdateGroupInternalServerError ErrorSchema

func (*UpdateGroupInternalServerError) updateGroupRes() {}

// UpdateGroupNoContent is response for UpdateGroup operation.
type UpdateGroupNoContent struct{}

func (*UpdateGroupNoContent) updateGroupRes() {}

type UpdateGroupNotFound ErrorSchema

func (*UpdateGroupNotFound) updateGroupRes() {}

type UpdateGroupUnauthorized ErrorSchema

func (*UpdateGroupUnauthorized) updateGroupRes() {}

type UpdateOidcBadRequest ErrorSchema

func (*UpdateOidcBadRequest) updateOidcRes() {}

type UpdateOidcConflict ErrorSchema

func (*UpdateOidcConflict) updateOidcRes() {}

type UpdateOidcInternalServerError ErrorSchema

func (*UpdateOidcInternalServerError) updateOidcRes() {}

// UpdateOidcNoContent is response for UpdateOidc operation.
type UpdateOidcNoContent struct{}

func (*UpdateOidcNoContent) updateOidcRes() {}

type UpdateOidcNotFound ErrorSchema

func (*UpdateOidcNotFound) updateOidcRes() {}

type UpdateOidcUnauthorized ErrorSchema

func (*UpdateOidcUnauthorized) updateOidcRes() {}

type UpdateRouteBadRequest ErrorSchema

func (*UpdateRouteBadRequest) updateRouteRes() {}

type UpdateRouteConflict ErrorSchema

func (*UpdateRouteConflict) updateRouteRes() {}

type UpdateRouteInternalServerError ErrorSchema

func (*UpdateRouteInternalServerError) updateRouteRes() {}

// UpdateRouteNoContent is response for UpdateRoute operation.
type UpdateRouteNoContent struct{}

func (*UpdateRouteNoContent) updateRouteRes() {}

type UpdateRouteNotFound ErrorSchema

func (*UpdateRouteNotFound) updateRouteRes() {}

type UpdateRouteUnauthorized ErrorSchema

func (*UpdateRouteUnauthorized) updateRouteRes() {}

type UpdateServiceBadRequest ErrorSchema

func (*UpdateServiceBadRequest) updateServiceRes() {}

type UpdateServiceConflict ErrorSchema

func (*UpdateServiceConflict) updateServiceRes() {}

type UpdateServiceInternalServerError ErrorSchema

func (*UpdateServiceInternalServerError) updateServiceRes() {}

// UpdateServiceNoContent is response for UpdateService operation.
type UpdateServiceNoContent struct{}

func (*UpdateServiceNoContent) updateServiceRes() {}

type UpdateServiceNotFound ErrorSchema

func (*UpdateServiceNotFound) updateServiceRes() {}

type UpdateServiceUnauthorized ErrorSchema

func (*UpdateServiceUnauthorized) updateServiceRes() {}

type UpdateSubscriptionBadRequest ErrorSchema

func (*UpdateSubscriptionBadRequest) updateSubscriptionRes() {}

type UpdateSubscriptionInternalServerError ErrorSchema

func (*UpdateSubscriptionInternalServerError) updateSubscriptionRes() {}

// UpdateSubscriptionNoContent is response for UpdateSubscription operation.
type UpdateSubscriptionNoContent struct{}

func (*UpdateSubscriptionNoContent) updateSubscriptionRes() {}

type UpdateSubscriptionUnauthorized ErrorSchema

func (*UpdateSubscriptionUnauthorized) updateSubscriptionRes() {}

type UpdateUserBadRequest ErrorSchema

func (*UpdateUserBadRequest) updateUserRes() {}

type UpdateUserConflict ErrorSchema

func (*UpdateUserConflict) updateUserRes() {}

type UpdateUserGroupBadRequest ErrorSchema

func (*UpdateUserGroupBadRequest) updateUserGroupRes() {}

type UpdateUserGroupInternalServerError ErrorSchema

func (*UpdateUserGroupInternalServerError) updateUserGroupRes() {}

// UpdateUserGroupNoContent is response for UpdateUserGroup operation.
type UpdateUserGroupNoContent struct{}

func (*UpdateUserGroupNoContent) updateUserGroupRes() {}

type UpdateUserGroupNotFound ErrorSchema

func (*UpdateUserGroupNotFound) updateUserGroupRes() {}

type UpdateUserGroupUnauthorized ErrorSchema

func (*UpdateUserGroupUnauthorized) updateUserGroupRes() {}

type UpdateUserInternalServerError ErrorSchema

func (*UpdateUserInternalServerError) updateUserRes() {}

// UpdateUserNoContent is response for UpdateUser operation.
type UpdateUserNoContent struct{}

func (*UpdateUserNoContent) updateUserRes() {}

type UpdateUserNotFound ErrorSchema

func (*UpdateUserNotFound) updateUserRes() {}

type UpdateUserUnauthorized ErrorSchema

func (*UpdateUserUnauthorized) updateUserRes() {}

type UpsertRequestTransformationBadRequest ErrorSchema

func (*UpsertRequestTransformationBadRequest) upsertRequestTransformationRes() {}

type UpsertRequestTransformationInternalServerError ErrorSchema

func (*UpsertRequestTransformationInternalServerError) upsertRequestTransformationRes() {}

// UpsertRequestTransformationNoContent is response for UpsertRequestTransformation operation.
type UpsertRequestTransformationNoContent struct{}

func (*UpsertRequestTransformationNoContent) upsertRequestTransformationRes() {}

type UpsertRequestTransformationNotFound ErrorSchema

func (*UpsertRequestTransformationNotFound) upsertRequestTransformationRes() {}

type UpsertResponseTransformationBadRequest ErrorSchema

func (*UpsertResponseTransformationBadRequest) upsertResponseTransformationRes() {}

type UpsertResponseTransformationInternalServerError ErrorSchema

func (*UpsertResponseTransformationInternalServerError) upsertResponseTransformationRes() {}

// UpsertResponseTransformationNoContent is response for UpsertResponseTransformation operation.
type UpsertResponseTransformationNoContent struct{}

func (*UpsertResponseTransformationNoContent) upsertResponseTransformationRes() {}

type UpsertResponseTransformationNotFound ErrorSchema

func (*UpsertResponseTransformationNotFound) upsertResponseTransformationRes() {}

type UpsertResponseTransformationUnauthorized ErrorSchema

func (*UpsertResponseTransformationUnauthorized) upsertResponseTransformationRes() {}

type UpsertRouteAuthorizationBadRequest ErrorSchema

func (*UpsertRouteAuthorizationBadRequest) upsertRouteAuthorizationRes() {}

type UpsertRouteAuthorizationInternalServerError ErrorSchema

func (*UpsertRouteAuthorizationInternalServerError) upsertRouteAuthorizationRes() {}

// UpsertRouteAuthorizationNoContent is response for UpsertRouteAuthorization operation.
type UpsertRouteAuthorizationNoContent struct{}

func (*UpsertRouteAuthorizationNoContent) upsertRouteAuthorizationRes() {}

type UpsertRouteAuthorizationNotFound ErrorSchema

func (*UpsertRouteAuthorizationNotFound) upsertRouteAuthorizationRes() {}

type UpsertRouteAuthorizationUnauthorized ErrorSchema

func (*UpsertRouteAuthorizationUnauthorized) upsertRouteAuthorizationRes() {}

type UpsertUserAuthenticationBadRequest ErrorSchema

func (*UpsertUserAuthenticationBadRequest) upsertUserAuthenticationRes() {}

type UpsertUserAuthenticationInternalServerError ErrorSchema

func (*UpsertUserAuthenticationInternalServerError) upsertUserAuthenticationRes() {}

// UpsertUserAuthenticationNoContent is response for UpsertUserAuthentication operation.
type UpsertUserAuthenticationNoContent struct{}

func (*UpsertUserAuthenticationNoContent) upsertUserAuthenticationRes() {}

type UpsertUserAuthenticationNotFound ErrorSchema

func (*UpsertUserAuthenticationNotFound) upsertUserAuthenticationRes() {}

type UpsertUserAuthenticationUnauthorized ErrorSchema

func (*UpsertUserAuthenticationUnauthorized) upsertUserAuthenticationRes() {}

// Merged schema.
// Ref: #/components/schemas/User
type User struct {
	// Entityを識別するためのID.
	ID OptUUID `json:"id"`
	// 作成日時.
	CreatedAt OptDateTime `json:"createdAt"`
	// 更新日時.
	UpdatedAt OptDateTime `json:"updatedAt"`
	Name      Name        `json:"name"`
	// カスタムID.
	CustomID OptString `json:"customID"`
	// Userが所属しているGroupのリスト.
	Groups []Group `json:"groups"`
	// Userを検索するためのタグ.
	Tags Tags `json:"tags"`
}

// GetID returns the value of ID.
func (s *User) GetID() OptUUID {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *User) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *User) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *User) GetName() Name {
	return s.Name
}

// GetCustomID returns the value of CustomID.
func (s *User) GetCustomID() OptString {
	return s.CustomID
}

// GetGroups returns the value of Groups.
func (s *User) GetGroups() []Group {
	return s.Groups
}

// GetTags returns the value of Tags.
func (s *User) GetTags() Tags {
	return s.Tags
}

// SetID sets the value of ID.
func (s *User) SetID(val OptUUID) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *User) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *User) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *User) SetName(val Name) {
	s.Name = val
}

// SetCustomID sets the value of CustomID.
func (s *User) SetCustomID(val OptString) {
	s.CustomID = val
}

// SetGroups sets the value of Groups.
func (s *User) SetGroups(val []Group) {
	s.Groups = val
}

// SetTags sets the value of Tags.
func (s *User) SetTags(val Tags) {
	s.Tags = val
}

// Ref: #/components/schemas/UserAuthentication
type UserAuthentication struct {
	BasicAuth OptBasicAuth `json:"basicAuth"`
	Jwt       OptJwt       `json:"jwt"`
	HmacAuth  OptHmacAuth  `json:"hmacAuth"`
}

// GetBasicAuth returns the value of BasicAuth.
func (s *UserAuthentication) GetBasicAuth() OptBasicAuth {
	return s.BasicAuth
}

// GetJwt returns the value of Jwt.
func (s *UserAuthentication) GetJwt() OptJwt {
	return s.Jwt
}

// GetHmacAuth returns the value of HmacAuth.
func (s *UserAuthentication) GetHmacAuth() OptHmacAuth {
	return s.HmacAuth
}

// SetBasicAuth sets the value of BasicAuth.
func (s *UserAuthentication) SetBasicAuth(val OptBasicAuth) {
	s.BasicAuth = val
}

// SetJwt sets the value of Jwt.
func (s *UserAuthentication) SetJwt(val OptJwt) {
	s.Jwt = val
}

// SetHmacAuth sets the value of HmacAuth.
func (s *UserAuthentication) SetHmacAuth(val OptHmacAuth) {
	s.HmacAuth = val
}

// Merged schema.
// Ref: #/components/schemas/UserDetail
type UserDetail struct {
	// Entityを識別するためのID.
	ID OptUUID `json:"id"`
	// 作成日時.
	CreatedAt OptDateTime `json:"createdAt"`
	// 更新日時.
	UpdatedAt OptDateTime `json:"updatedAt"`
	Name      Name        `json:"name"`
	// カスタムID.
	CustomID OptString `json:"customID"`
	// Userが所属しているGroupのリスト.
	Groups []Group `json:"groups"`
	// Userを検索するためのタグ.
	Tags                Tags   `json:"tags"`
	IpRestrictionConfig jx.Raw `json:"ipRestrictionConfig"`
}

// GetID returns the value of ID.
func (s *UserDetail) GetID() OptUUID {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *UserDetail) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *UserDetail) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *UserDetail) GetName() Name {
	return s.Name
}

// GetCustomID returns the value of CustomID.
func (s *UserDetail) GetCustomID() OptString {
	return s.CustomID
}

// GetGroups returns the value of Groups.
func (s *UserDetail) GetGroups() []Group {
	return s.Groups
}

// GetTags returns the value of Tags.
func (s *UserDetail) GetTags() Tags {
	return s.Tags
}

// GetIpRestrictionConfig returns the value of IpRestrictionConfig.
func (s *UserDetail) GetIpRestrictionConfig() jx.Raw {
	return s.IpRestrictionConfig
}

// SetID sets the value of ID.
func (s *UserDetail) SetID(val OptUUID) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *UserDetail) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *UserDetail) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *UserDetail) SetName(val Name) {
	s.Name = val
}

// SetCustomID sets the value of CustomID.
func (s *UserDetail) SetCustomID(val OptString) {
	s.CustomID = val
}

// SetGroups sets the value of Groups.
func (s *UserDetail) SetGroups(val []Group) {
	s.Groups = val
}

// SetTags sets the value of Tags.
func (s *UserDetail) SetTags(val Tags) {
	s.Tags = val
}

// SetIpRestrictionConfig sets the value of IpRestrictionConfig.
func (s *UserDetail) SetIpRestrictionConfig(val jx.Raw) {
	s.IpRestrictionConfig = val
}

// Ref: #/components/schemas/UserGroupDetail
type UserGroupDetail struct {
	// GroupのID.
	ID uuid.UUID `json:"id"`
	// Group名.
	Name Name `json:"name"`
	// UserがGroupに所属しているかどうか.
	IsAssigned bool `json:"isAssigned"`
}

// GetID returns the value of ID.
func (s *UserGroupDetail) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *UserGroupDetail) GetName() Name {
	return s.Name
}

// GetIsAssigned returns the value of IsAssigned.
func (s *UserGroupDetail) GetIsAssigned() bool {
	return s.IsAssigned
}

// SetID sets the value of ID.
func (s *UserGroupDetail) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserGroupDetail) SetName(val Name) {
	s.Name = val
}

// SetIsAssigned sets the value of IsAssigned.
func (s *UserGroupDetail) SetIsAssigned(val bool) {
	s.IsAssigned = val
}
